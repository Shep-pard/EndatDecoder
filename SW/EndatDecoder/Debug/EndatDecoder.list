
EndatDecoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005920  08005920  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005928  08005928  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000ddc  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001797f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af8  00000000  00000000  000379c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  0003a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a0  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020100  00000000  00000000  0003c938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014623  00000000  00000000  0005ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5196  00000000  00000000  0007105b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001361f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f20  00000000  00000000  00136244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800584c 	.word	0x0800584c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800584c 	.word	0x0800584c

080001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001c8:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001ca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001ce:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000258 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001d6:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001da:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001dc:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001de:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e0:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001e2:	d332      	bcc.n	800024a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001e4:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001e6:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001e8:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001ea:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001ec:	d314      	bcc.n	8000218 <_CheckCase2>

080001ee <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001ee:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f0:	19d0      	adds	r0, r2, r7
 80001f2:	bf00      	nop

080001f4 <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001f8:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001fc:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001fe:	d005      	beq.n	800020c <_CSDone>
        LDRB     R3,[R1], #+1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000204:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000208:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 800020a:	d1f3      	bne.n	80001f4 <_LoopCopyStraight>

0800020c <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 800020c:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000210:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000212:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000214:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000216:	4770      	bx	lr

08000218 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000218:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800021a:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 800021c:	d319      	bcc.n	8000252 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 800021e:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000220:	1b12      	subs	r2, r2, r4

08000222 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000222:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 8000226:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800022a:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 800022c:	d1f9      	bne.n	8000222 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 800022e:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000230:	d005      	beq.n	800023e <_No2ChunkNeeded>

08000232 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000232:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000236:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800023a:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 800023c:	d1f9      	bne.n	8000232 <_LoopCopyAfterWrapAround>

0800023e <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 800023e:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000242:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000244:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000248:	4770      	bx	lr

0800024a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800024a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800024c:	3801      	subs	r0, #1
        CMP      R0,R2
 800024e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000250:	d2cd      	bcs.n	80001ee <_Case4>

08000252 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000252:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000254:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000256:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000258:	20000d4c 	.word	0x20000d4c

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b96e 	b.w	8000550 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468c      	mov	ip, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8083 	bne.w	80003a2 <__udivmoddi4+0x116>
 800029c:	428a      	cmp	r2, r1
 800029e:	4617      	mov	r7, r2
 80002a0:	d947      	bls.n	8000332 <__udivmoddi4+0xa6>
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	b142      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a8:	f1c2 0020 	rsb	r0, r2, #32
 80002ac:	fa24 f000 	lsr.w	r0, r4, r0
 80002b0:	4091      	lsls	r1, r2
 80002b2:	4097      	lsls	r7, r2
 80002b4:	ea40 0c01 	orr.w	ip, r0, r1
 80002b8:	4094      	lsls	r4, r2
 80002ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fbbc f6f8 	udiv	r6, ip, r8
 80002c4:	fa1f fe87 	uxth.w	lr, r7
 80002c8:	fb08 c116 	mls	r1, r8, r6, ip
 80002cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d0:	fb06 f10e 	mul.w	r1, r6, lr
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x60>
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	f106 30ff 	add.w	r0, r6, #4294967295
 80002de:	f080 8119 	bcs.w	8000514 <__udivmoddi4+0x288>
 80002e2:	4299      	cmp	r1, r3
 80002e4:	f240 8116 	bls.w	8000514 <__udivmoddi4+0x288>
 80002e8:	3e02      	subs	r6, #2
 80002ea:	443b      	add	r3, r7
 80002ec:	1a5b      	subs	r3, r3, r1
 80002ee:	b2a4      	uxth	r4, r4
 80002f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f4:	fb08 3310 	mls	r3, r8, r0, r3
 80002f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000300:	45a6      	cmp	lr, r4
 8000302:	d909      	bls.n	8000318 <__udivmoddi4+0x8c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	f080 8105 	bcs.w	8000518 <__udivmoddi4+0x28c>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f240 8102 	bls.w	8000518 <__udivmoddi4+0x28c>
 8000314:	3802      	subs	r0, #2
 8000316:	443c      	add	r4, r7
 8000318:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800031c:	eba4 040e 	sub.w	r4, r4, lr
 8000320:	2600      	movs	r6, #0
 8000322:	b11d      	cbz	r5, 800032c <__udivmoddi4+0xa0>
 8000324:	40d4      	lsrs	r4, r2
 8000326:	2300      	movs	r3, #0
 8000328:	e9c5 4300 	strd	r4, r3, [r5]
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xaa>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	2a00      	cmp	r2, #0
 800033c:	d150      	bne.n	80003e0 <__udivmoddi4+0x154>
 800033e:	1bcb      	subs	r3, r1, r7
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f f887 	uxth.w	r8, r7
 8000348:	2601      	movs	r6, #1
 800034a:	fbb3 fcfe 	udiv	ip, r3, lr
 800034e:	0c21      	lsrs	r1, r4, #16
 8000350:	fb0e 331c 	mls	r3, lr, ip, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb08 f30c 	mul.w	r3, r8, ip
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0xe4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0xe2>
 8000368:	428b      	cmp	r3, r1
 800036a:	f200 80e9 	bhi.w	8000540 <__udivmoddi4+0x2b4>
 800036e:	4684      	mov	ip, r0
 8000370:	1ac9      	subs	r1, r1, r3
 8000372:	b2a3      	uxth	r3, r4
 8000374:	fbb1 f0fe 	udiv	r0, r1, lr
 8000378:	fb0e 1110 	mls	r1, lr, r0, r1
 800037c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000380:	fb08 f800 	mul.w	r8, r8, r0
 8000384:	45a0      	cmp	r8, r4
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0x10c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x10a>
 8000390:	45a0      	cmp	r8, r4
 8000392:	f200 80d9 	bhi.w	8000548 <__udivmoddi4+0x2bc>
 8000396:	4618      	mov	r0, r3
 8000398:	eba4 0408 	sub.w	r4, r4, r8
 800039c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a0:	e7bf      	b.n	8000322 <__udivmoddi4+0x96>
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0x12e>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80b1 	beq.w	800050e <__udivmoddi4+0x282>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x1cc>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0x140>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80b8 	bhi.w	800053c <__udivmoddi4+0x2b0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0103 	sbc.w	r1, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	468c      	mov	ip, r1
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0a8      	beq.n	800032c <__udivmoddi4+0xa0>
 80003da:	e9c5 4c00 	strd	r4, ip, [r5]
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0xa0>
 80003e0:	f1c2 0320 	rsb	r3, r2, #32
 80003e4:	fa20 f603 	lsr.w	r6, r0, r3
 80003e8:	4097      	lsls	r7, r2
 80003ea:	fa01 f002 	lsl.w	r0, r1, r2
 80003ee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f2:	40d9      	lsrs	r1, r3
 80003f4:	4330      	orrs	r0, r6
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	fbb1 f6fe 	udiv	r6, r1, lr
 80003fc:	fa1f f887 	uxth.w	r8, r7
 8000400:	fb0e 1116 	mls	r1, lr, r6, r1
 8000404:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000408:	fb06 f108 	mul.w	r1, r6, r8
 800040c:	4299      	cmp	r1, r3
 800040e:	fa04 f402 	lsl.w	r4, r4, r2
 8000412:	d909      	bls.n	8000428 <__udivmoddi4+0x19c>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f106 3cff 	add.w	ip, r6, #4294967295
 800041a:	f080 808d 	bcs.w	8000538 <__udivmoddi4+0x2ac>
 800041e:	4299      	cmp	r1, r3
 8000420:	f240 808a 	bls.w	8000538 <__udivmoddi4+0x2ac>
 8000424:	3e02      	subs	r6, #2
 8000426:	443b      	add	r3, r7
 8000428:	1a5b      	subs	r3, r3, r1
 800042a:	b281      	uxth	r1, r0
 800042c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000430:	fb0e 3310 	mls	r3, lr, r0, r3
 8000434:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000438:	fb00 f308 	mul.w	r3, r0, r8
 800043c:	428b      	cmp	r3, r1
 800043e:	d907      	bls.n	8000450 <__udivmoddi4+0x1c4>
 8000440:	1879      	adds	r1, r7, r1
 8000442:	f100 3cff 	add.w	ip, r0, #4294967295
 8000446:	d273      	bcs.n	8000530 <__udivmoddi4+0x2a4>
 8000448:	428b      	cmp	r3, r1
 800044a:	d971      	bls.n	8000530 <__udivmoddi4+0x2a4>
 800044c:	3802      	subs	r0, #2
 800044e:	4439      	add	r1, r7
 8000450:	1acb      	subs	r3, r1, r3
 8000452:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000456:	e778      	b.n	800034a <__udivmoddi4+0xbe>
 8000458:	f1c6 0c20 	rsb	ip, r6, #32
 800045c:	fa03 f406 	lsl.w	r4, r3, r6
 8000460:	fa22 f30c 	lsr.w	r3, r2, ip
 8000464:	431c      	orrs	r4, r3
 8000466:	fa20 f70c 	lsr.w	r7, r0, ip
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000472:	fa21 f10c 	lsr.w	r1, r1, ip
 8000476:	431f      	orrs	r7, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fa1f f884 	uxth.w	r8, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800048a:	fb09 fa08 	mul.w	sl, r9, r8
 800048e:	458a      	cmp	sl, r1
 8000490:	fa02 f206 	lsl.w	r2, r2, r6
 8000494:	fa00 f306 	lsl.w	r3, r0, r6
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x220>
 800049a:	1861      	adds	r1, r4, r1
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d248      	bcs.n	8000534 <__udivmoddi4+0x2a8>
 80004a2:	458a      	cmp	sl, r1
 80004a4:	d946      	bls.n	8000534 <__udivmoddi4+0x2a8>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	4421      	add	r1, r4
 80004ac:	eba1 010a 	sub.w	r1, r1, sl
 80004b0:	b2bf      	uxth	r7, r7
 80004b2:	fbb1 f0fe 	udiv	r0, r1, lr
 80004b6:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45b8      	cmp	r8, r7
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x24a>
 80004c6:	19e7      	adds	r7, r4, r7
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d22e      	bcs.n	800052c <__udivmoddi4+0x2a0>
 80004ce:	45b8      	cmp	r8, r7
 80004d0:	d92c      	bls.n	800052c <__udivmoddi4+0x2a0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4427      	add	r7, r4
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba7 0708 	sub.w	r7, r7, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454f      	cmp	r7, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	4649      	mov	r1, r9
 80004e8:	d31a      	bcc.n	8000520 <__udivmoddi4+0x294>
 80004ea:	d017      	beq.n	800051c <__udivmoddi4+0x290>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x27a>
 80004ee:	ebb3 020e 	subs.w	r2, r3, lr
 80004f2:	eb67 0701 	sbc.w	r7, r7, r1
 80004f6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004fa:	40f2      	lsrs	r2, r6
 80004fc:	ea4c 0202 	orr.w	r2, ip, r2
 8000500:	40f7      	lsrs	r7, r6
 8000502:	e9c5 2700 	strd	r2, r7, [r5]
 8000506:	2600      	movs	r6, #0
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	462e      	mov	r6, r5
 8000510:	4628      	mov	r0, r5
 8000512:	e70b      	b.n	800032c <__udivmoddi4+0xa0>
 8000514:	4606      	mov	r6, r0
 8000516:	e6e9      	b.n	80002ec <__udivmoddi4+0x60>
 8000518:	4618      	mov	r0, r3
 800051a:	e6fd      	b.n	8000318 <__udivmoddi4+0x8c>
 800051c:	4543      	cmp	r3, r8
 800051e:	d2e5      	bcs.n	80004ec <__udivmoddi4+0x260>
 8000520:	ebb8 0e02 	subs.w	lr, r8, r2
 8000524:	eb69 0104 	sbc.w	r1, r9, r4
 8000528:	3801      	subs	r0, #1
 800052a:	e7df      	b.n	80004ec <__udivmoddi4+0x260>
 800052c:	4608      	mov	r0, r1
 800052e:	e7d2      	b.n	80004d6 <__udivmoddi4+0x24a>
 8000530:	4660      	mov	r0, ip
 8000532:	e78d      	b.n	8000450 <__udivmoddi4+0x1c4>
 8000534:	4681      	mov	r9, r0
 8000536:	e7b9      	b.n	80004ac <__udivmoddi4+0x220>
 8000538:	4666      	mov	r6, ip
 800053a:	e775      	b.n	8000428 <__udivmoddi4+0x19c>
 800053c:	4630      	mov	r0, r6
 800053e:	e74a      	b.n	80003d6 <__udivmoddi4+0x14a>
 8000540:	f1ac 0c02 	sub.w	ip, ip, #2
 8000544:	4439      	add	r1, r7
 8000546:	e713      	b.n	8000370 <__udivmoddi4+0xe4>
 8000548:	3802      	subs	r0, #2
 800054a:	443c      	add	r4, r7
 800054c:	e724      	b.n	8000398 <__udivmoddi4+0x10c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	; 0x30
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	4b65      	ldr	r3, [pc, #404]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a64      	ldr	r2, [pc, #400]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000574:	f043 0310 	orr.w	r3, r3, #16
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b62      	ldr	r3, [pc, #392]	; (8000704 <MX_GPIO_Init+0x1b0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0310 	and.w	r3, r3, #16
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	4b5e      	ldr	r3, [pc, #376]	; (8000704 <MX_GPIO_Init+0x1b0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a5d      	ldr	r2, [pc, #372]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b5b      	ldr	r3, [pc, #364]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b57      	ldr	r3, [pc, #348]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a56      	ldr	r2, [pc, #344]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b54      	ldr	r3, [pc, #336]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b50      	ldr	r3, [pc, #320]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a4f      	ldr	r2, [pc, #316]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b4d      	ldr	r3, [pc, #308]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b49      	ldr	r3, [pc, #292]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a48      	ldr	r2, [pc, #288]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b42      	ldr	r3, [pc, #264]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a41      	ldr	r2, [pc, #260]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_EN1_Pin|SPI1_EN2_Pin|UART1_EN_Pin|SPI3_EN1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f648 0150 	movw	r1, #34896	; 0x8850
 8000618:	483b      	ldr	r0, [pc, #236]	; (8000708 <MX_GPIO_Init+0x1b4>)
 800061a:	f001 fd15 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_LD1_Pin|SPI1_LD2_Pin|SPI3_EN2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8000624:	4839      	ldr	r0, [pc, #228]	; (800070c <MX_GPIO_Init+0x1b8>)
 8000626:	f001 fd0f 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USART3_EN2_Pin|USART3_EN1_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000630:	4837      	ldr	r0, [pc, #220]	; (8000710 <MX_GPIO_Init+0x1bc>)
 8000632:	f001 fd09 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_EN1_Pin|SPI2_EN2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800063c:	4835      	ldr	r0, [pc, #212]	; (8000714 <MX_GPIO_Init+0x1c0>)
 800063e:	f001 fd03 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_LD1_Pin|SPI2_LD2_Pin|SS_LD2_Pin|SM_LD2_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f240 310d 	movw	r1, #781	; 0x30d
 8000648:	4833      	ldr	r0, [pc, #204]	; (8000718 <MX_GPIO_Init+0x1c4>)
 800064a:	f001 fcfd 	bl	8002048 <HAL_GPIO_WritePin>
                          |SM_LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_EN1_Pin|SPI1_EN2_Pin|UART1_EN_Pin|SPI3_EN1_Pin;
 800064e:	f648 0350 	movw	r3, #34896	; 0x8850
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4828      	ldr	r0, [pc, #160]	; (8000708 <MX_GPIO_Init+0x1b4>)
 8000668:	f001 fb52 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_LD1_Pin|SPI1_LD2_Pin|SPI3_EN2_Pin;
 800066c:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4821      	ldr	r0, [pc, #132]	; (800070c <MX_GPIO_Init+0x1b8>)
 8000686:	f001 fb43 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USART3_EN2_Pin|USART3_EN1_Pin;
 800068a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	481b      	ldr	r0, [pc, #108]	; (8000710 <MX_GPIO_Init+0x1bc>)
 80006a4:	f001 fb34 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_EN1_Pin|SPI2_EN2_Pin;
 80006a8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80006c2:	f001 fb25 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = SPI2_LD1_Pin|SPI2_LD2_Pin|SS_LD2_Pin|SM_LD2_Pin
 80006c6:	f240 330d 	movw	r3, #781	; 0x30d
 80006ca:	61fb      	str	r3, [r7, #28]
                          |SM_LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_GPIO_Init+0x1c4>)
 80006e0:	f001 fb16 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SS_LD1_Pin;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SS_LD1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <MX_GPIO_Init+0x1c4>)
 80006f8:	f001 fb0a 	bl	8001d10 <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	40020800 	.word	0x40020800
 8000710:	40021000 	.word	0x40021000
 8000714:	40020400 	.word	0x40020400
 8000718:	40020c00 	.word	0x40020c00

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08d      	sub	sp, #52	; 0x34
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f001 f8bb 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f843 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f7ff ff13 	bl	8000554 <MX_GPIO_Init>
  MX_SPI1_Init();
 800072e:	f000 f8af 	bl	8000890 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000732:	f000 f8e5 	bl	8000900 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000736:	f000 f91b 	bl	8000970 <MX_SPI3_Init>
  MX_TIM2_Init();
 800073a:	f000 fb9d 	bl	8000e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 800073e:	f000 fbff 	bl	8000f40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000742:	f000 fc61 	bl	8001008 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000746:	f000 ff3d 	bl	80015c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800074a:	f000 ff65 	bl	8001618 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800074e:	f000 ff8d 	bl	800166c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8000752:	f000 fcbd 	bl	80010d0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000756:	f000 fd11 	bl	800117c <MX_TIM9_Init>
  MX_TIM13_Init();
 800075a:	f000 fd4f 	bl	80011fc <MX_TIM13_Init>
  MX_TIM14_Init();
 800075e:	f000 fd71 	bl	8001244 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 8000762:	f005 f811 	bl	8005788 <SEGGER_SYSVIEW_Conf>


  uint8_t data[] = {0,1,2,3,4,5,6,7,8,9,10,11,12};
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <main+0x84>)
 8000768:	f107 041c 	add.w	r4, r7, #28
 800076c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800076e:	c407      	stmia	r4!, {r0, r1, r2}
 8000770:	7023      	strb	r3, [r4, #0]

  uint8_t txData[10];
  uint8_t rxData[10];
  txData[0] = 0b00011100;
 8000772:	231c      	movs	r3, #28
 8000774:	743b      	strb	r3, [r7, #16]
  uint32_t abc = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_WritePin(SPI1_EN2_GPIO_Port, SPI1_EN2_Pin, GPIO_PIN_SET);	// set clk  rr485 to tx
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <main+0x88>)
 8000780:	f001 fc62 	bl	8002048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_EN2_GPIO_Port, SPI2_EN2_Pin, GPIO_PIN_SET);	// set clk  rr485 to tx
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <main+0x8c>)
 800078c:	f001 fc5c 	bl	8002048 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim14);
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <main+0x90>)
 8000792:	f002 fadf 	bl	8002d54 <HAL_TIM_Base_Start_IT>

while(1){
	HAL_Delay(100);
 8000796:	2064      	movs	r0, #100	; 0x64
 8000798:	f001 f8f2 	bl	8001980 <HAL_Delay>
 800079c:	e7fb      	b.n	8000796 <main+0x7a>
 800079e:	bf00      	nop
 80007a0:	08005864 	.word	0x08005864
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000c34 	.word	0x20000c34

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 f83c 	bl	800583c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <SystemClock_Config+0xcc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SystemClock_Config+0xd0>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000824:	23a8      	movs	r3, #168	; 0xa8
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fc21 	bl	800207c <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 f820 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fe82 	bl	800256c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086e:	f000 f809 	bl	8000884 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x68>)
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <MX_SPI1_Init+0x6c>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI1_Init+0x68>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008c6:	2238      	movs	r2, #56	; 0x38
 80008c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008de:	220a      	movs	r2, #10
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_SPI1_Init+0x68>)
 80008e4:	f002 f83e 	bl	8002964 <HAL_SPI_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008ee:	f7ff ffc9 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000a14 	.word	0x20000a14
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_SPI2_Init+0x68>)
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <MX_SPI2_Init+0x6c>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_SPI2_Init+0x68>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_SPI2_Init+0x68>)
 8000914:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000918:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_SPI2_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI2_Init+0x68>)
 8000922:	2202      	movs	r2, #2
 8000924:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_SPI2_Init+0x68>)
 8000928:	2201      	movs	r2, #1
 800092a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI2_Init+0x68>)
 800092e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000932:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI2_Init+0x68>)
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SPI2_Init+0x68>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI2_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SPI2_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI2_Init+0x68>)
 800094e:	220a      	movs	r2, #10
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_SPI2_Init+0x68>)
 8000954:	f002 f806 	bl	8002964 <HAL_SPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800095e:	f7ff ff91 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000964 	.word	0x20000964
 800096c:	40003800 	.word	0x40003800

08000970 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_SPI3_Init+0x68>)
 8000976:	4a19      	ldr	r2, [pc, #100]	; (80009dc <MX_SPI3_Init+0x6c>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_SPI3_Init+0x68>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_SPI3_Init+0x68>)
 8000984:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000988:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_SPI3_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_SPI3_Init+0x68>)
 8000992:	2202      	movs	r2, #2
 8000994:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_SPI3_Init+0x68>)
 8000998:	2201      	movs	r2, #1
 800099a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_SPI3_Init+0x68>)
 800099e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SPI3_Init+0x68>)
 80009a6:	2230      	movs	r2, #48	; 0x30
 80009a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_SPI3_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SPI3_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_SPI3_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_SPI3_Init+0x68>)
 80009be:	220a      	movs	r2, #10
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_SPI3_Init+0x68>)
 80009c4:	f001 ffce 	bl	8002964 <HAL_SPI_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80009ce:	f7ff ff59 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200009bc 	.word	0x200009bc
 80009dc:	40003c00 	.word	0x40003c00

080009e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a58      	ldr	r2, [pc, #352]	; (8000b60 <HAL_SPI_MspInit+0x180>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d134      	bne.n	8000a6c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b54      	ldr	r3, [pc, #336]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1a:	623b      	str	r3, [r7, #32]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	4b50      	ldr	r3, [pc, #320]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a4f      	ldr	r2, [pc, #316]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a3a:	23a0      	movs	r3, #160	; 0xa0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4844      	ldr	r0, [pc, #272]	; (8000b68 <HAL_SPI_MspInit+0x188>)
 8000a56:	f001 f95b 	bl	8001d10 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2023      	movs	r0, #35	; 0x23
 8000a60:	f001 f88d 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a64:	2023      	movs	r0, #35	; 0x23
 8000a66:	f001 f8a6 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a6a:	e074      	b.n	8000b56 <HAL_SPI_MspInit+0x176>
  else if(spiHandle->Instance==SPI2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <HAL_SPI_MspInit+0x18c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d135      	bne.n	8000ae2 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a39      	ldr	r2, [pc, #228]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000aae:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4829      	ldr	r0, [pc, #164]	; (8000b70 <HAL_SPI_MspInit+0x190>)
 8000acc:	f001 f920 	bl	8001d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2105      	movs	r1, #5
 8000ad4:	2024      	movs	r0, #36	; 0x24
 8000ad6:	f001 f852 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ada:	2024      	movs	r0, #36	; 0x24
 8000adc:	f001 f86b 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 8000ae0:	e039      	b.n	8000b56 <HAL_SPI_MspInit+0x176>
  else if(spiHandle->Instance==SPI3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <HAL_SPI_MspInit+0x194>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d134      	bne.n	8000b56 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_SPI_MspInit+0x184>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <HAL_SPI_MspInit+0x198>)
 8000b42:	f001 f8e5 	bl	8001d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2105      	movs	r1, #5
 8000b4a:	2033      	movs	r0, #51	; 0x33
 8000b4c:	f001 f817 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000b50:	2033      	movs	r0, #51	; 0x33
 8000b52:	f001 f830 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3738      	adds	r7, #56	; 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40003800 	.word	0x40003800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40003c00 	.word	0x40003c00
 8000b78:	40020800 	.word	0x40020800

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 fe92 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8000c24:	f004 fc68 	bl	80054f8 <SEGGER_SYSVIEW_RecordEnterISR>

  /* USER CODE END SPI1_IRQn 0 */
//  HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */
	    rxData[rxCount++] = SPI1->DR;				// receive
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <SPI1_IRQHandler+0x3c>)
 8000c2a:	68d9      	ldr	r1, [r3, #12]
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <SPI1_IRQHandler+0x40>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	b2d0      	uxtb	r0, r2
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SPI1_IRQHandler+0x40>)
 8000c36:	7010      	strb	r0, [r2, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SPI1_IRQHandler+0x44>)
 8000c3e:	5499      	strb	r1, [r3, r2]

	    if(rxCount==4){
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <SPI1_IRQHandler+0x40>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d105      	bne.n	8000c54 <SPI1_IRQHandler+0x34>
//	  	  while((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY);
	  	  SPI1->CR1 &= ~SPI_CR1_SPE; //disable spi
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SPI1_IRQHandler+0x3c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <SPI1_IRQHandler+0x3c>)
 8000c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c52:	6013      	str	r3, [r2, #0]
//	  	  SPI1->CR2 &= ~SPI_CR2_RXNEIE;
	    }

	    SEGGER_SYSVIEW_RecordExitISR();
 8000c54:	f004 fc92 	bl	800557c <SEGGER_SYSVIEW_RecordExitISR>

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40013000 	.word	0x40013000
 8000c60:	20000034 	.word	0x20000034
 8000c64:	20000a6c 	.word	0x20000a6c

08000c68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8000c6c:	f004 fc44 	bl	80054f8 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END SPI2_IRQn 0 */
//  HAL_SPI_IRQHandler(&hspi2);
  /* USER CODE BEGIN SPI2_IRQn 1 */
  rxData2[rxCount2++] = SPI2->DR;				// receive
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <SPI2_IRQHandler+0x3c>)
 8000c72:	68d9      	ldr	r1, [r3, #12]
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <SPI2_IRQHandler+0x40>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	b2d0      	uxtb	r0, r2
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SPI2_IRQHandler+0x40>)
 8000c7e:	7010      	strb	r0, [r2, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	b2c9      	uxtb	r1, r1
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <SPI2_IRQHandler+0x44>)
 8000c86:	5499      	strb	r1, [r3, r2]

  if(rxCount2==4){
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <SPI2_IRQHandler+0x40>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d105      	bne.n	8000c9c <SPI2_IRQHandler+0x34>
//	  	  while((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY);
	  SPI2->CR1 &= ~SPI_CR1_SPE; //disable spi
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SPI2_IRQHandler+0x3c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <SPI2_IRQHandler+0x3c>)
 8000c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c9a:	6013      	str	r3, [r2, #0]
//	  SPI2->CR2 &= ~SPI_CR2_RXNEIE;
  }

  SEGGER_SYSVIEW_RecordExitISR();
 8000c9c:	f004 fc6e 	bl	800557c <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END SPI2_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40003800 	.word	0x40003800
 8000ca8:	20000035 	.word	0x20000035
 8000cac:	20000a78 	.word	0x20000a78

08000cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <USART1_IRQHandler+0x10>)
 8000cb6:	f002 ff23 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000cc0 	.word	0x20000cc0

08000cc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART3_IRQHandler+0x10>)
 8000cca:	f002 ff19 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000c7c 	.word	0x20000c7c

08000cd8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <TIM8_UP_TIM13_IRQHandler+0x14>)
 8000cde:	f002 f8f8 	bl	8002ed2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8000ce4:	f002 f8f5 	bl	8002ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000a84 	.word	0x20000a84
 8000cf0:	20000b5c 	.word	0x20000b5c

08000cf4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8000cf8:	f004 fbfe 	bl	80054f8 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 8000cfe:	f002 f8e8 	bl	8002ed2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>)
 8000d04:	f002 f8e5 	bl	8002ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */



  startSPI(SPIs[spiCount]);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <TIM8_TRG_COM_TIM14_IRQHandler+0x48>)
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f81d 	bl	8000d54 <startSPI>
  spiCount = spiCount ^ 0x1;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8000d26:	701a      	strb	r2, [r3, #0]



  SEGGER_SYSVIEW_RecordExitISR();
 8000d28:	f004 fc28 	bl	800557c <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000a84 	.word	0x20000a84
 8000d34:	20000c34 	.word	0x20000c34
 8000d38:	20000036 	.word	0x20000036
 8000d3c:	20000004 	.word	0x20000004

08000d40 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <SPI3_IRQHandler+0x10>)
 8000d46:	f001 fe97 	bl	8002a78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200009bc 	.word	0x200009bc

08000d54 <startSPI>:

/* USER CODE BEGIN 1 */



void startSPI(SPI_TypeDef* SPI){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	SPI->CR1 &= ~SPI_CR1_SPE;//disable spi
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	601a      	str	r2, [r3, #0]
	SPI->CR1 = SPI_CR1_LSBFIRST | SPI_CR1_MSTR | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE | SPI_BAUDRATEPRESCALER_64;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f248 32af 	movw	r2, #33711	; 0x83af
 8000d6e:	601a      	str	r2, [r3, #0]

	if(SPI == SPI1){
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <startSPI+0xe8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d105      	bne.n	8000d84 <startSPI+0x30>
		HAL_GPIO_WritePin(SPI1_EN1_GPIO_Port, SPI1_EN1_Pin, GPIO_PIN_SET);	// set data rs485 to tx
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4830      	ldr	r0, [pc, #192]	; (8000e40 <startSPI+0xec>)
 8000d7e:	f001 f963 	bl	8002048 <HAL_GPIO_WritePin>
 8000d82:	e005      	b.n	8000d90 <startSPI+0x3c>
	} else {
		HAL_GPIO_WritePin(SPI2_EN1_GPIO_Port, SPI2_EN1_Pin, GPIO_PIN_SET);	// set data rs485 to tx
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8a:	482e      	ldr	r0, [pc, #184]	; (8000e44 <startSPI+0xf0>)
 8000d8c:	f001 f95c 	bl	8002048 <HAL_GPIO_WritePin>
	}


	SPI->CR1 |= SPI_CR1_BIDIOE;//enable output
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	601a      	str	r2, [r3, #0]
	SPI->CR1 |= SPI_CR1_SPE;//enable spi
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]

	SPI->DR = txData[0];
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <startSPI+0xf4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]
	while(!(SPI->SR & SPI_SR_TXE));
 8000db2:	bf00      	nop
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f9      	beq.n	8000db4 <startSPI+0x60>
	while(SPI->SR & SPI_SR_BSY);
 8000dc0:	bf00      	nop
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f9      	bne.n	8000dc2 <startSPI+0x6e>

	SPI->CR1 &= ~SPI_CR1_BIDIOE;//disable output, this activates the clock
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]
	if(SPI == SPI1){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <startSPI+0xe8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d105      	bne.n	8000dee <startSPI+0x9a>
		HAL_GPIO_WritePin(SPI1_EN1_GPIO_Port, SPI1_EN1_Pin, GPIO_PIN_RESET);	// set data rs485 to rx
 8000de2:	2200      	movs	r2, #0
 8000de4:	2110      	movs	r1, #16
 8000de6:	4816      	ldr	r0, [pc, #88]	; (8000e40 <startSPI+0xec>)
 8000de8:	f001 f92e 	bl	8002048 <HAL_GPIO_WritePin>
 8000dec:	e005      	b.n	8000dfa <startSPI+0xa6>
	} else {
		HAL_GPIO_WritePin(SPI2_EN1_GPIO_Port, SPI2_EN1_Pin, GPIO_PIN_RESET);	// set data rs485 to tx
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df4:	4813      	ldr	r0, [pc, #76]	; (8000e44 <startSPI+0xf0>)
 8000df6:	f001 f927 	bl	8002048 <HAL_GPIO_WritePin>
	}

	SPI->CR1 &= ~SPI_CR1_SPE;//disable spi
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
	SPI->CR1 = SPI_CR1_LSBFIRST | SPI_CR1_MSTR | SPI_CR1_CPOL | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE | SPI_BAUDRATEPRESCALER_64;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f248 32ae 	movw	r2, #33710	; 0x83ae
 8000e0c:	601a      	str	r2, [r3, #0]
	rxCount = 0;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <startSPI+0xf8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	rxCount2 = 0;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <startSPI+0xfc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
	SPI->CR2 |= SPI_CR2_RXNEIE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	605a      	str	r2, [r3, #4]

	SPI->CR1 |= SPI_CR1_SPE;//enable spi
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000034 	.word	0x20000034
 8000e50:	20000035 	.word	0x20000035

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ec2:	481e      	ldr	r0, [pc, #120]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000ec4:	f001 ffb6 	bl	8002e34 <HAL_TIM_OC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ece:	f7ff fcd9 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4816      	ldr	r0, [pc, #88]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000ee2:	f002 fd2f 	bl	8003944 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000eec:	f7ff fcca 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	4619      	mov	r1, r3
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000f08:	f002 f8ec 	bl	80030e4 <HAL_TIM_OC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f12:	f7ff fcb7 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2204      	movs	r2, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000f1e:	f002 f8e1 	bl	80030e4 <HAL_TIM_OC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f28:	f7ff fcac 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_TIM2_Init+0xc4>)
 8000f2e:	f000 fac1 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000bec 	.word	0x20000bec

08000f40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <MX_TIM3_Init+0xc4>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f88:	481d      	ldr	r0, [pc, #116]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000f8a:	f001 ff53 	bl	8002e34 <HAL_TIM_OC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f94:	f7ff fc76 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4816      	ldr	r0, [pc, #88]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000fa8:	f002 fccc 	bl	8003944 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000fb2:	f7ff fc67 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000fce:	f002 f889 	bl	80030e4 <HAL_TIM_OC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000fd8:	f7ff fc54 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2204      	movs	r2, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000fe4:	f002 f87e 	bl	80030e4 <HAL_TIM_OC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fee:	f7ff fc49 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <MX_TIM3_Init+0xc0>)
 8000ff4:	f000 fa5e 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000b14 	.word	0x20000b14
 8001004:	40000400 	.word	0x40000400

08001008 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_TIM4_Init+0xc0>)
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <MX_TIM4_Init+0xc4>)
 800102e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <MX_TIM4_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_TIM4_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_TIM4_Init+0xc0>)
 800103e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001042:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_TIM4_Init+0xc0>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_TIM4_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <MX_TIM4_Init+0xc0>)
 8001052:	f001 feef 	bl	8002e34 <HAL_TIM_OC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800105c:	f7ff fc12 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4619      	mov	r1, r3
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <MX_TIM4_Init+0xc0>)
 8001070:	f002 fc68 	bl	8003944 <HAL_TIMEx_MasterConfigSynchronization>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800107a:	f7ff fc03 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_TIM4_Init+0xc0>)
 8001096:	f002 f825 	bl	80030e4 <HAL_TIM_OC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80010a0:	f7ff fbf0 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2204      	movs	r2, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM4_Init+0xc0>)
 80010ac:	f002 f81a 	bl	80030e4 <HAL_TIM_OC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010b6:	f7ff fbe5 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM4_Init+0xc0>)
 80010bc:	f000 f9fa 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000acc 	.word	0x20000acc
 80010cc:	40000800 	.word	0x40000800

080010d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_TIM8_Init+0xa4>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <MX_TIM8_Init+0xa8>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_TIM8_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_TIM8_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM8_Init+0xa4>)
 8001102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001106:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM8_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_TIM8_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_TIM8_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_TIM8_Init+0xa4>)
 800111c:	f001 fdca 	bl	8002cb4 <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001126:	f7ff fbad 	bl	8000884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800112e:	2350      	movs	r3, #80	; 0x50
 8001130:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM8_Init+0xa4>)
 8001142:	f002 f82b 	bl	800319c <HAL_TIM_SlaveConfigSynchro>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 800114c:	f7ff fb9a 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM8_Init+0xa4>)
 800115e:	f002 fbf1 	bl	8003944 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8001168:	f7ff fb8c 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000a84 	.word	0x20000a84
 8001178:	40010400 	.word	0x40010400

0800117c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_TIM9_Init+0x78>)
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <MX_TIM9_Init+0x7c>)
 8001194:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM9_Init+0x78>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM9_Init+0x78>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_TIM9_Init+0x78>)
 80011a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_TIM9_Init+0x78>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_TIM9_Init+0x78>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80011b6:	480f      	ldr	r0, [pc, #60]	; (80011f4 <MX_TIM9_Init+0x78>)
 80011b8:	f001 fd7c 	bl	8002cb4 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80011c2:	f7ff fb5f 	bl	8000884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80011c6:	2307      	movs	r3, #7
 80011c8:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80011ca:	2360      	movs	r3, #96	; 0x60
 80011cc:	60bb      	str	r3, [r7, #8]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.TriggerFilter = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM9_Init+0x78>)
 80011dc:	f001 ffde 	bl	800319c <HAL_TIM_SlaveConfigSynchro>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f7ff fb4d 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000ba4 	.word	0x20000ba4
 80011f8:	40014000 	.word	0x40014000

080011fc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_TIM13_Init+0x40>)
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <MX_TIM13_Init+0x44>)
 8001204:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_TIM13_Init+0x40>)
 8001208:	2254      	movs	r2, #84	; 0x54
 800120a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_TIM13_Init+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_TIM13_Init+0x40>)
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_TIM13_Init+0x40>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_TIM13_Init+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_TIM13_Init+0x40>)
 8001228:	f001 fd44 	bl	8002cb4 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001232:	f7ff fb27 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000b5c 	.word	0x20000b5c
 8001240:	40001c00 	.word	0x40001c00

08001244 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_TIM14_Init+0x3c>)
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <MX_TIM14_Init+0x40>)
 800124c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_TIM14_Init+0x3c>)
 8001250:	2254      	movs	r2, #84	; 0x54
 8001252:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_TIM14_Init+0x3c>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_TIM14_Init+0x3c>)
 800125c:	2264      	movs	r2, #100	; 0x64
 800125e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_TIM14_Init+0x3c>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_TIM14_Init+0x3c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_TIM14_Init+0x3c>)
 800126e:	f001 fd21 	bl	8002cb4 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001278:	f7ff fb04 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000c34 	.word	0x20000c34
 8001284:	40002000 	.word	0x40002000

08001288 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d10e      	bne.n	80012b8 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012b6:	e026      	b.n	8001306 <HAL_TIM_OC_MspInit+0x7e>
  else if(tim_ocHandle->Instance==TIM3)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_TIM_OC_MspInit+0x90>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10e      	bne.n	80012e0 <HAL_TIM_OC_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
}
 80012de:	e012      	b.n	8001306 <HAL_TIM_OC_MspInit+0x7e>
  else if(tim_ocHandle->Instance==TIM4)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_TIM_OC_MspInit+0x94>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10d      	bne.n	8001306 <HAL_TIM_OC_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_TIM_OC_MspInit+0x8c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40000400 	.word	0x40000400
 800131c:	40000800 	.word	0x40000800

08001320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM8)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d13c      	bne.n	80013bc <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	4b55      	ldr	r3, [pc, #340]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	623b      	str	r3, [r7, #32]
 800135c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	4b4e      	ldr	r3, [pc, #312]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a4d      	ldr	r2, [pc, #308]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137a:	2340      	movs	r3, #64	; 0x40
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800138a:	2303      	movs	r3, #3
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4842      	ldr	r0, [pc, #264]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 8001396:	f000 fcbb 	bl	8001d10 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	202c      	movs	r0, #44	; 0x2c
 80013a0:	f000 fbed 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013a4:	202c      	movs	r0, #44	; 0x2c
 80013a6:	f000 fc06 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	202d      	movs	r0, #45	; 0x2d
 80013b0:	f000 fbe5 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80013b4:	202d      	movs	r0, #45	; 0x2d
 80013b6:	f000 fbfe 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80013ba:	e068      	b.n	800148e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM9)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a38      	ldr	r2, [pc, #224]	; (80014a4 <HAL_TIM_Base_MspInit+0x184>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12c      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a2c      	ldr	r2, [pc, #176]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800140e:	2303      	movs	r3, #3
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4823      	ldr	r0, [pc, #140]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 800141a:	f000 fc79 	bl	8001d10 <HAL_GPIO_Init>
}
 800141e:	e036      	b.n	800148e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM13)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a21      	ldr	r2, [pc, #132]	; (80014ac <HAL_TIM_Base_MspInit+0x18c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d116      	bne.n	8001458 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	202c      	movs	r0, #44	; 0x2c
 800144c:	f000 fb97 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001450:	202c      	movs	r0, #44	; 0x2c
 8001452:	f000 fbb0 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 8001456:	e01a      	b.n	800148e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM14)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_TIM_Base_MspInit+0x190>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d115      	bne.n	800148e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 4, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2104      	movs	r1, #4
 8001482:	202d      	movs	r0, #45	; 0x2d
 8001484:	f000 fb7b 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001488:	202d      	movs	r0, #45	; 0x2d
 800148a:	f000 fb94 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3738      	adds	r7, #56	; 0x38
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40010400 	.word	0x40010400
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40014000 	.word	0x40014000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40001c00 	.word	0x40001c00
 80014b0:	40002000 	.word	0x40002000

080014b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d11e      	bne.n	8001514 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a33      	ldr	r2, [pc, #204]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f2:	2303      	movs	r3, #3
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001502:	2301      	movs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4828      	ldr	r0, [pc, #160]	; (80015b0 <HAL_TIM_MspPostInit+0xfc>)
 800150e:	f000 fbff 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001512:	e047      	b.n	80015a4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_TIM_MspPostInit+0x100>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d11e      	bne.n	800155c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a21      	ldr	r2, [pc, #132]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800153a:	2330      	movs	r3, #48	; 0x30
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800154a:	2302      	movs	r3, #2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <HAL_TIM_MspPostInit+0x104>)
 8001556:	f000 fbdb 	bl	8001d10 <HAL_GPIO_Init>
}
 800155a:	e023      	b.n	80015a4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_TIM_MspPostInit+0x108>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11e      	bne.n	80015a4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_TIM_MspPostInit+0xf8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001582:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001594:	2302      	movs	r3, #2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <HAL_TIM_MspPostInit+0x10c>)
 80015a0:	f000 fbb6 	bl	8001d10 <HAL_GPIO_Init>
}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40000800 	.word	0x40000800
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_USART1_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART1_UART_Init+0x4c>)
 80015fc:	f002 fa32 	bl	8003a64 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001606:	f7ff f93d 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000cc0 	.word	0x20000cc0
 8001614:	40011000 	.word	0x40011000

08001618 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f002 fa08 	bl	8003a64 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f7ff f913 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000d04 	.word	0x20000d04
 8001668:	40004400 	.word	0x40004400

0800166c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_USART3_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 80016a4:	f002 f9de 	bl	8003a64 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f7ff f8e9 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000c7c 	.word	0x20000c7c
 80016bc:	40004800 	.word	0x40004800

080016c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a54      	ldr	r2, [pc, #336]	; (8001830 <HAL_UART_MspInit+0x170>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d135      	bne.n	800174e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_UART_MspInit+0x174>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_UART_MspInit+0x174>)
 80016ec:	f043 0310 	orr.w	r3, r3, #16
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_UART_MspInit+0x174>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <HAL_UART_MspInit+0x174>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a4b      	ldr	r2, [pc, #300]	; (8001834 <HAL_UART_MspInit+0x174>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <HAL_UART_MspInit+0x174>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800171a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800172c:	2307      	movs	r3, #7
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4840      	ldr	r0, [pc, #256]	; (8001838 <HAL_UART_MspInit+0x178>)
 8001738:	f000 faea 	bl	8001d10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2107      	movs	r1, #7
 8001740:	2025      	movs	r0, #37	; 0x25
 8001742:	f000 fa1c 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001746:	2025      	movs	r0, #37	; 0x25
 8001748:	f000 fa35 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800174c:	e06b      	b.n	8001826 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a3a      	ldr	r2, [pc, #232]	; (800183c <HAL_UART_MspInit+0x17c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d12c      	bne.n	80017b2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_UART_MspInit+0x174>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_UART_MspInit+0x174>)
 8001762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_UART_MspInit+0x174>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_UART_MspInit+0x174>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_UART_MspInit+0x174>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_UART_MspInit+0x174>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001790:	230c      	movs	r3, #12
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a0:	2307      	movs	r3, #7
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <HAL_UART_MspInit+0x178>)
 80017ac:	f000 fab0 	bl	8001d10 <HAL_GPIO_Init>
}
 80017b0:	e039      	b.n	8001826 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a22      	ldr	r2, [pc, #136]	; (8001840 <HAL_UART_MspInit+0x180>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d134      	bne.n	8001826 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_UART_MspInit+0x174>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_UART_MspInit+0x174>)
 80017c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_UART_MspInit+0x174>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0x174>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <HAL_UART_MspInit+0x174>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_UART_MspInit+0x174>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001806:	2307      	movs	r3, #7
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001812:	f000 fa7d 	bl	8001d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2107      	movs	r1, #7
 800181a:	2027      	movs	r0, #39	; 0x27
 800181c:	f000 f9af 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001820:	2027      	movs	r0, #39	; 0x27
 8001822:	f000 f9c8 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	; 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40011000 	.word	0x40011000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40004400 	.word	0x40004400
 8001840:	40004800 	.word	0x40004800
 8001844:	40020400 	.word	0x40020400

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001864:	4c0b      	ldr	r4, [pc, #44]	; (8001894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001872:	f7ff faef 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f003 ffaf 	bl	80057d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7fe ff4f 	bl	800071c <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800188c:	08005930 	.word	0x08005930
  ldr r2, =_sbss
 8001890:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001894:	20000df4 	.word	0x20000df4

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f94f 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff f954 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f967 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f92f 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000000c 	.word	0x2000000c
 8001938:	20000014 	.word	0x20000014
 800193c:	20000010 	.word	0x20000010

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000014 	.word	0x20000014
 8001964:	20000d48 	.word	0x20000d48

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000d48 	.word	0x20000d48

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000014 	.word	0x20000014

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff feb6 	bl	8001968 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d008      	beq.n	8001c1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e052      	b.n	8001cc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0216 	bic.w	r2, r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <HAL_DMA_Abort+0x62>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0208 	bic.w	r2, r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6c:	e013      	b.n	8001c96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6e:	f7ff fe7b 	bl	8001968 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d90c      	bls.n	8001c96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2203      	movs	r2, #3
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e015      	b.n	8001cc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e4      	bne.n	8001c6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	223f      	movs	r2, #63	; 0x3f
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e00c      	b.n	8001d02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2205      	movs	r2, #5
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e16b      	b.n	8002004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 815a 	bne.w	8001ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d005      	beq.n	8001d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d130      	bne.n	8001dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d017      	beq.n	8001e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d123      	bne.n	8001e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80b4 	beq.w	8001ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b60      	ldr	r3, [pc, #384]	; (800201c <HAL_GPIO_Init+0x30c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a5f      	ldr	r2, [pc, #380]	; (800201c <HAL_GPIO_Init+0x30c>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_GPIO_Init+0x30c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a5b      	ldr	r2, [pc, #364]	; (8002020 <HAL_GPIO_Init+0x310>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x314>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02b      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_GPIO_Init+0x318>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d025      	beq.n	8001f32 <HAL_GPIO_Init+0x222>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x31c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01f      	beq.n	8001f2e <HAL_GPIO_Init+0x21e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x320>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d019      	beq.n	8001f2a <HAL_GPIO_Init+0x21a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_GPIO_Init+0x324>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x216>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_GPIO_Init+0x328>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x212>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x32c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x330>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x20a>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e00e      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	e00c      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f1e:	2306      	movs	r3, #6
 8001f20:	e00a      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f22:	2305      	movs	r3, #5
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x228>
 8001f36:	2300      	movs	r3, #0
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f48:	4935      	ldr	r1, [pc, #212]	; (8002020 <HAL_GPIO_Init+0x310>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7a:	4a32      	ldr	r2, [pc, #200]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3301      	adds	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	f67f ae90 	bls.w	8001d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40013800 	.word	0x40013800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	40020800 	.word	0x40020800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40021000 	.word	0x40021000
 8002038:	40021400 	.word	0x40021400
 800203c:	40021800 	.word	0x40021800
 8002040:	40021c00 	.word	0x40021c00
 8002044:	40013c00 	.word	0x40013c00

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002064:	e003      	b.n	800206e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	041a      	lsls	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e264      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d075      	beq.n	8002186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209a:	4ba3      	ldr	r3, [pc, #652]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d00c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a6:	4ba0      	ldr	r3, [pc, #640]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d112      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b2:	4b9d      	ldr	r3, [pc, #628]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020be:	d10b      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	4b99      	ldr	r3, [pc, #612]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d05b      	beq.n	8002184 <HAL_RCC_OscConfig+0x108>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d157      	bne.n	8002184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e23f      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x74>
 80020e2:	4b91      	ldr	r3, [pc, #580]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a90      	ldr	r2, [pc, #576]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xb0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b8b      	ldr	r3, [pc, #556]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a8a      	ldr	r2, [pc, #552]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a87      	ldr	r2, [pc, #540]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xb0>
 8002114:	4b84      	ldr	r3, [pc, #528]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a83      	ldr	r2, [pc, #524]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b81      	ldr	r3, [pc, #516]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a80      	ldr	r2, [pc, #512]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fc18 	bl	8001968 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fc14 	bl	8001968 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e204      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xc0>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fc04 	bl	8001968 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff fc00 	bl	8001968 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1f0      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b6c      	ldr	r3, [pc, #432]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0xe8>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002192:	4b65      	ldr	r3, [pc, #404]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b62      	ldr	r3, [pc, #392]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021aa:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x152>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1c4      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4b56      	ldr	r3, [pc, #344]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4952      	ldr	r1, [pc, #328]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	e03a      	b.n	800225a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	4b4f      	ldr	r3, [pc, #316]	; (800232c <HAL_RCC_OscConfig+0x2b0>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7ff fbb9 	bl	8001968 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fa:	f7ff fbb5 	bl	8001968 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1a5      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b43      	ldr	r3, [pc, #268]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4940      	ldr	r1, [pc, #256]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <HAL_RCC_OscConfig+0x2b0>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff fb98 	bl	8001968 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223c:	f7ff fb94 	bl	8001968 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e184      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d030      	beq.n	80022c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCC_OscConfig+0x2b4>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7ff fb78 	bl	8001968 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227c:	f7ff fb74 	bl	8001968 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e164      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x200>
 800229a:	e015      	b.n	80022c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCC_OscConfig+0x2b4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fb61 	bl	8001968 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022aa:	f7ff fb5d 	bl	8001968 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e14d      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a0 	beq.w	8002416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x2b8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d121      	bne.n	8002356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_RCC_OscConfig+0x2b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_RCC_OscConfig+0x2b8>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7ff fb23 	bl	8001968 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	e011      	b.n	800234a <HAL_RCC_OscConfig+0x2ce>
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	42470000 	.word	0x42470000
 8002330:	42470e80 	.word	0x42470e80
 8002334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7ff fb16 	bl	8001968 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e106      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b85      	ldr	r3, [pc, #532]	; (8002560 <HAL_RCC_OscConfig+0x4e4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x2f0>
 800235e:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a80      	ldr	r2, [pc, #512]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	e01c      	b.n	80023a6 <HAL_RCC_OscConfig+0x32a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002374:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	4b78      	ldr	r3, [pc, #480]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a77      	ldr	r2, [pc, #476]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0x32a>
 800238e:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a74      	ldr	r2, [pc, #464]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a71      	ldr	r2, [pc, #452]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d015      	beq.n	80023da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ae:	f7ff fadb 	bl	8001968 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff fad7 	bl	8001968 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0c5      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	4b65      	ldr	r3, [pc, #404]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ee      	beq.n	80023b6 <HAL_RCC_OscConfig+0x33a>
 80023d8:	e014      	b.n	8002404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7ff fac5 	bl	8001968 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff fac1 	bl	8001968 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0af      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ee      	bne.n	80023e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d105      	bne.n	8002416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a55      	ldr	r2, [pc, #340]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 809b 	beq.w	8002556 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d05c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d141      	bne.n	80024b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002434:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <HAL_RCC_OscConfig+0x4ec>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff fa95 	bl	8001968 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff fa91 	bl	8001968 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e081      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	019b      	lsls	r3, r3, #6
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	3b01      	subs	r3, #1
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	4937      	ldr	r1, [pc, #220]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_OscConfig+0x4ec>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fa6a 	bl	8001968 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7ff fa66 	bl	8001968 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e056      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x41c>
 80024b6:	e04e      	b.n	8002556 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7ff fa53 	bl	8001968 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7ff fa4f 	bl	8001968 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e03f      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x44a>
 80024e4:	e037      	b.n	8002556 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e032      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d028      	beq.n	8002552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d121      	bne.n	8002552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d11a      	bne.n	8002552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002528:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800252a:	4293      	cmp	r3, r2
 800252c:	d111      	bne.n	8002552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40007000 	.word	0x40007000
 8002564:	40023800 	.word	0x40023800
 8002568:	42470060 	.word	0x42470060

0800256c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0cc      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d90c      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0b8      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	494d      	ldr	r1, [pc, #308]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d044      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d119      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e07f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d003      	beq.n	800262a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002626:	2b03      	cmp	r3, #3
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e067      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b37      	ldr	r3, [pc, #220]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4934      	ldr	r1, [pc, #208]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7ff f984 	bl	8001968 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7ff f980 	bl	8001968 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e04f      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d20c      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e032      	b.n	800271a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4916      	ldr	r1, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490e      	ldr	r1, [pc, #56]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f2:	f000 f821 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490a      	ldr	r1, [pc, #40]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f8e4 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023c00 	.word	0x40023c00
 8002728:	40023800 	.word	0x40023800
 800272c:	080058fc 	.word	0x080058fc
 8002730:	2000000c 	.word	0x2000000c
 8002734:	20000010 	.word	0x20000010

08002738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	2300      	movs	r3, #0
 800274a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002750:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d00d      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x40>
 800275c:	2b08      	cmp	r3, #8
 800275e:	f200 80bd 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x34>
 8002766:	2b04      	cmp	r3, #4
 8002768:	d003      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x3a>
 800276a:	e0b7      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800276e:	60bb      	str	r3, [r7, #8]
       break;
 8002770:	e0b7      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002774:	60bb      	str	r3, [r7, #8]
      break;
 8002776:	e0b4      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002778:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d04d      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278e:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	461a      	mov	r2, r3
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	ea02 0800 	and.w	r8, r2, r0
 80027a6:	ea03 0901 	and.w	r9, r3, r1
 80027aa:	4640      	mov	r0, r8
 80027ac:	4649      	mov	r1, r9
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	014b      	lsls	r3, r1, #5
 80027b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027bc:	0142      	lsls	r2, r0, #5
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	ebb0 0008 	subs.w	r0, r0, r8
 80027c6:	eb61 0109 	sbc.w	r1, r1, r9
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027d8:	0182      	lsls	r2, r0, #6
 80027da:	1a12      	subs	r2, r2, r0
 80027dc:	eb63 0301 	sbc.w	r3, r3, r1
 80027e0:	f04f 0000 	mov.w	r0, #0
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	00d9      	lsls	r1, r3, #3
 80027ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ee:	00d0      	lsls	r0, r2, #3
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	eb12 0208 	adds.w	r2, r2, r8
 80027f8:	eb43 0309 	adc.w	r3, r3, r9
 80027fc:	f04f 0000 	mov.w	r0, #0
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	0259      	lsls	r1, r3, #9
 8002806:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800280a:	0250      	lsls	r0, r2, #9
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	461a      	mov	r2, r3
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	f7fd fd1e 	bl	800025c <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e04a      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	461a      	mov	r2, r3
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	ea02 0400 	and.w	r4, r2, r0
 8002842:	ea03 0501 	and.w	r5, r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	014b      	lsls	r3, r1, #5
 8002854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002858:	0142      	lsls	r2, r0, #5
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	1b00      	subs	r0, r0, r4
 8002860:	eb61 0105 	sbc.w	r1, r1, r5
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	018b      	lsls	r3, r1, #6
 800286e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002872:	0182      	lsls	r2, r0, #6
 8002874:	1a12      	subs	r2, r2, r0
 8002876:	eb63 0301 	sbc.w	r3, r3, r1
 800287a:	f04f 0000 	mov.w	r0, #0
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	00d9      	lsls	r1, r3, #3
 8002884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002888:	00d0      	lsls	r0, r2, #3
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	1912      	adds	r2, r2, r4
 8002890:	eb45 0303 	adc.w	r3, r5, r3
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0299      	lsls	r1, r3, #10
 800289e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028a2:	0290      	lsls	r0, r2, #10
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	f7fd fcd2 	bl	800025c <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	60bb      	str	r3, [r7, #8]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028de:	60bb      	str	r3, [r7, #8]
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	68bb      	ldr	r3, [r7, #8]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	0800590c 	.word	0x0800590c

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffdc 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	0800590c 	.word	0x0800590c

08002964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07b      	b.n	8002a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d108      	bne.n	8002990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002986:	d009      	beq.n	800299c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
 800298e:	e005      	b.n	800299c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe f812 	bl	80009e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	ea42 0103 	orr.w	r1, r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0104 	and.w	r1, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0210 	and.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    return;
 8002aba:	e0d7      	b.n	8002c6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_SPI_IRQHandler+0x66>
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	09db      	lsrs	r3, r3, #7
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
    return;
 8002adc:	e0c6      	b.n	8002c6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_SPI_IRQHandler+0x8c>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80b4 	beq.w	8002c6c <HAL_SPI_IRQHandler+0x1f4>
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80ad 	beq.w	8002c6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d023      	beq.n	8002b66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d011      	beq.n	8002b4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	e00b      	b.n	8002b66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	693b      	ldr	r3, [r7, #16]
        return;
 8002b64:	e082      	b.n	8002c6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d014      	beq.n	8002b9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0208 	orr.w	r2, r3, #8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04f      	beq.n	8002c6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_SPI_IRQHandler+0x17e>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d034      	beq.n	8002c60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0203 	bic.w	r2, r2, #3
 8002c04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d011      	beq.n	8002c32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_SPI_IRQHandler+0x1fc>)
 8002c14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f855 	bl	8001cca <HAL_DMA_Abort_IT>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_SPI_IRQHandler+0x1fc>)
 8002c40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f83f 	bl	8001cca <HAL_DMA_Abort_IT>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002c5e:	e003      	b.n	8002c68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f809 	bl	8002c78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c66:	e000      	b.n	8002c6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002c68:	bf00      	nop
    return;
 8002c6a:	bf00      	nop
  }
}
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	08002c8d 	.word	0x08002c8d

08002c78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff ffe6 	bl	8002c78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e041      	b.n	8002d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fb20 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f000 fac6 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04e      	b.n	8002e0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d022      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d01d      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d111      	bne.n	8002df8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d010      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	e007      	b.n	8002e08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40010400 	.word	0x40010400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40001800 	.word	0x40001800

08002e34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e041      	b.n	8002eca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe fa14 	bl	8001288 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 fa06 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d122      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d11b      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0202 	mvn.w	r2, #2
 8002efe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f997 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8002f1a:	e005      	b.n	8002f28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f989 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f99a 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d122      	bne.n	8002f82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d11b      	bne.n	8002f82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0204 	mvn.w	r2, #4
 8002f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f96d 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8002f6e:	e005      	b.n	8002f7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f95f 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f970 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d122      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11b      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f06f 0208 	mvn.w	r2, #8
 8002fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f943 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8002fc2:	e005      	b.n	8002fd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f935 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f946 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d122      	bne.n	800302a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d11b      	bne.n	800302a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f06f 0210 	mvn.w	r2, #16
 8002ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2208      	movs	r2, #8
 8003000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f919 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8003016:	e005      	b.n	8003024 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f90b 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f91c 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10e      	bne.n	8003056 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f06f 0201 	mvn.w	r2, #1
 800304e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8e5 	bl	8003220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003060:	2b80      	cmp	r3, #128	; 0x80
 8003062:	d10e      	bne.n	8003082 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d107      	bne.n	8003082 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800307a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fce7 	bl	8003a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d10e      	bne.n	80030ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d107      	bne.n	80030ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8e1 	bl	8003270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d10e      	bne.n	80030da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d107      	bne.n	80030da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f06f 0220 	mvn.w	r2, #32
 80030d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fcb1 	bl	8003a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_OC_ConfigChannel+0x1e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e048      	b.n	8003194 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d839      	bhi.n	8003184 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003185 	.word	0x08003185
 8003120:	08003185 	.word	0x08003185
 8003124:	08003185 	.word	0x08003185
 8003128:	0800315b 	.word	0x0800315b
 800312c:	08003185 	.word	0x08003185
 8003130:	08003185 	.word	0x08003185
 8003134:	08003185 	.word	0x08003185
 8003138:	08003169 	.word	0x08003169
 800313c:	08003185 	.word	0x08003185
 8003140:	08003185 	.word	0x08003185
 8003144:	08003185 	.word	0x08003185
 8003148:	08003177 	.word	0x08003177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f936 	bl	80033c4 <TIM_OC1_SetConfig>
      break;
 8003158:	e017      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f99f 	bl	80034a4 <TIM_OC2_SetConfig>
      break;
 8003166:	e010      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fa0e 	bl	8003590 <TIM_OC3_SetConfig>
      break;
 8003174:	e009      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa7b 	bl	8003678 <TIM_OC4_SetConfig>
      break;
 8003182:	e002      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
      break;
 8003188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e031      	b.n	8003218 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 faac 	bl	8003724 <TIM_SlaveTimer_SetConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e018      	b.n	8003218 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003204:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3c      	ldr	r2, [pc, #240]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3b      	ldr	r2, [pc, #236]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <TIM_Base_SetConfig+0x114>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d027      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d023      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d017      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <TIM_Base_SetConfig+0x128>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <TIM_Base_SetConfig+0x134>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <TIM_Base_SetConfig+0x138>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <TIM_Base_SetConfig+0x13c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d103      	bne.n	8003384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	615a      	str	r2, [r3, #20]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40001800 	.word	0x40001800
 80033bc:	40001c00 	.word	0x40001c00
 80033c0:	40002000 	.word	0x40002000

080033c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 0302 	bic.w	r3, r3, #2
 800340c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a20      	ldr	r2, [pc, #128]	; (800349c <TIM_OC1_SetConfig+0xd8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_OC1_SetConfig+0x64>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <TIM_OC1_SetConfig+0xdc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10c      	bne.n	8003442 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 0308 	bic.w	r3, r3, #8
 800342e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <TIM_OC1_SetConfig+0xd8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_OC1_SetConfig+0x8e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <TIM_OC1_SetConfig+0xdc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	621a      	str	r2, [r3, #32]
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40010000 	.word	0x40010000
 80034a0:	40010400 	.word	0x40010400

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0210 	bic.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0320 	bic.w	r3, r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a22      	ldr	r2, [pc, #136]	; (8003588 <TIM_OC2_SetConfig+0xe4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC2_SetConfig+0x68>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <TIM_OC2_SetConfig+0xe8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10d      	bne.n	8003528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a17      	ldr	r2, [pc, #92]	; (8003588 <TIM_OC2_SetConfig+0xe4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC2_SetConfig+0x94>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <TIM_OC2_SetConfig+0xe8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d113      	bne.n	8003560 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800353e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40010400 	.word	0x40010400

08003590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <TIM_OC3_SetConfig+0xe0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_OC3_SetConfig+0x66>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <TIM_OC3_SetConfig+0xe4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10d      	bne.n	8003612 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <TIM_OC3_SetConfig+0xe0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_OC3_SetConfig+0x92>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a15      	ldr	r2, [pc, #84]	; (8003674 <TIM_OC3_SetConfig+0xe4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d113      	bne.n	800364a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40010000 	.word	0x40010000
 8003674:	40010400 	.word	0x40010400

08003678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	031b      	lsls	r3, r3, #12
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a12      	ldr	r2, [pc, #72]	; (800371c <TIM_OC4_SetConfig+0xa4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_OC4_SetConfig+0x68>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a11      	ldr	r2, [pc, #68]	; (8003720 <TIM_OC4_SetConfig+0xa8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d109      	bne.n	80036f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400

08003724 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003740:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b70      	cmp	r3, #112	; 0x70
 800376c:	d01a      	beq.n	80037a4 <TIM_SlaveTimer_SetConfig+0x80>
 800376e:	2b70      	cmp	r3, #112	; 0x70
 8003770:	d860      	bhi.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
 8003772:	2b60      	cmp	r3, #96	; 0x60
 8003774:	d054      	beq.n	8003820 <TIM_SlaveTimer_SetConfig+0xfc>
 8003776:	2b60      	cmp	r3, #96	; 0x60
 8003778:	d85c      	bhi.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
 800377a:	2b50      	cmp	r3, #80	; 0x50
 800377c:	d046      	beq.n	800380c <TIM_SlaveTimer_SetConfig+0xe8>
 800377e:	2b50      	cmp	r3, #80	; 0x50
 8003780:	d858      	bhi.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d019      	beq.n	80037ba <TIM_SlaveTimer_SetConfig+0x96>
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d854      	bhi.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
 800378a:	2b30      	cmp	r3, #48	; 0x30
 800378c:	d055      	beq.n	800383a <TIM_SlaveTimer_SetConfig+0x116>
 800378e:	2b30      	cmp	r3, #48	; 0x30
 8003790:	d850      	bhi.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
 8003792:	2b20      	cmp	r3, #32
 8003794:	d051      	beq.n	800383a <TIM_SlaveTimer_SetConfig+0x116>
 8003796:	2b20      	cmp	r3, #32
 8003798:	d84c      	bhi.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04d      	beq.n	800383a <TIM_SlaveTimer_SetConfig+0x116>
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d04b      	beq.n	800383a <TIM_SlaveTimer_SetConfig+0x116>
 80037a2:	e047      	b.n	8003834 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68d9      	ldr	r1, [r3, #12]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f000 f8a6 	bl	8003904 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80037b8:	e040      	b.n	800383c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d101      	bne.n	80037c6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e03b      	b.n	800383e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
      break;
 800380a:	e017      	b.n	800383c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	461a      	mov	r2, r3
 800381a:	f000 f814 	bl	8003846 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800381e:	e00d      	b.n	800383c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	461a      	mov	r2, r3
 800382e:	f000 f839 	bl	80038a4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003832:	e003      	b.n	800383c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
      break;
 8003838:	e000      	b.n	800383c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800383a:	bf00      	nop
  }

  return status;
 800383c:	7dfb      	ldrb	r3, [r7, #23]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f023 0201 	bic.w	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 030a 	bic.w	r3, r3, #10
 8003882:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0210 	bic.w	r2, r3, #16
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	031b      	lsls	r3, r3, #12
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800391e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	021a      	lsls	r2, r3, #8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	431a      	orrs	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003958:	2302      	movs	r3, #2
 800395a:	e05a      	b.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d01d      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10c      	bne.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40010400 	.word	0x40010400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40001800 	.word	0x40001800

08003a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e03f      	b.n	8003af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fe18 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fc7b 	bl	80043a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0ba      	sub	sp, #232	; 0xe8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fb65 	bl	800422e <UART_Receive_IT>
      return;
 8003b64:	e256      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80de 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80d1 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
 8003bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0204 	orr.w	r2, r3, #4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 81ed 	beq.w	800400a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 faf0 	bl	800422e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_UART_IRQHandler+0x17a>
 8003c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04f      	beq.n	8003d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9f8 	bl	8004070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d141      	bne.n	8003d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1d9      	bne.n	8003c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d013      	beq.n	8003d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <HAL_UART_IRQHandler+0x3dc>)
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd ffeb 	bl	8001cca <HAL_DMA_Abort_IT>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d04:	4610      	mov	r0, r2
 8003d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e00e      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f99a 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00a      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f996 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e006      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f992 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d26:	e170      	b.n	800400a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	bf00      	nop
    return;
 8003d2a:	e16e      	b.n	800400a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 814a 	bne.w	8003fca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8143 	beq.w	8003fca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 813c 	beq.w	8003fca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	f040 80b4 	bne.w	8003ee0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8140 	beq.w	800400e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d96:	429a      	cmp	r2, r3
 8003d98:	f080 8139 	bcs.w	800400e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003da2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dae:	f000 8088 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1d9      	bne.n	8003db2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e1      	bne.n	8003dfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ea6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e3      	bne.n	8003e80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fe94 	bl	8001bea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8c0 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ed8:	e099      	b.n	800400e <HAL_UART_IRQHandler+0x50e>
 8003eda:	bf00      	nop
 8003edc:	08004137 	.word	0x08004137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 808b 	beq.w	8004012 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8086 	beq.w	8004012 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f2a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e3      	bne.n	8003f06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f62:	633a      	str	r2, [r7, #48]	; 0x30
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e3      	bne.n	8003f3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fa8:	61fa      	str	r2, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	69b9      	ldr	r1, [r7, #24]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e3      	bne.n	8003f84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f848 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fc8:	e023      	b.n	8004012 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_UART_IRQHandler+0x4ea>
 8003fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8bb 	bl	800415e <UART_Transmit_IT>
    return;
 8003fe8:	e014      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <HAL_UART_IRQHandler+0x514>
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8fb 	bl	80041fe <UART_EndTransmit_IT>
    return;
 8004008:	e004      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
    return;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
      return;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
      return;
 8004012:	bf00      	nop
  }
}
 8004014:	37e8      	adds	r7, #232	; 0xe8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop

0800401c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b095      	sub	sp, #84	; 0x54
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	643a      	str	r2, [r7, #64]	; 0x40
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800409e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3314      	adds	r3, #20
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d119      	bne.n	800411c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	613b      	str	r3, [r7, #16]
   return(result);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800412a:	bf00      	nop
 800412c:	3754      	adds	r7, #84	; 0x54
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff77 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b21      	cmp	r3, #33	; 0x21
 8004170:	d13e      	bne.n	80041f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d114      	bne.n	80041a6 <UART_Transmit_IT+0x48>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	e008      	b.n	80041b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6211      	str	r1, [r2, #32]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fefc 	bl	800401c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	; 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b22      	cmp	r3, #34	; 0x22
 8004240:	f040 80ab 	bne.w	800439a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d117      	bne.n	800427e <UART_Receive_IT+0x50>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d113      	bne.n	800427e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426c:	b29a      	uxth	r2, r3
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
 800427c:	e026      	b.n	80042cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d007      	beq.n	80042a2 <UART_Receive_IT+0x74>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <UART_Receive_IT+0x82>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e008      	b.n	80042c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4619      	mov	r1, r3
 80042da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d15a      	bne.n	8004396 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0220 	bic.w	r2, r2, #32
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	2b01      	cmp	r3, #1
 800431e:	d135      	bne.n	800438c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d10a      	bne.n	800437e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fe67 	bl	8004058 <HAL_UARTEx_RxEventCallback>
 800438a:	e002      	b.n	8004392 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fe4f 	bl	8004030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e002      	b.n	800439c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3730      	adds	r7, #48	; 0x30
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b09f      	sub	sp, #124	; 0x7c
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	ea40 0301 	orr.w	r3, r0, r1
 80043c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4313      	orrs	r3, r2
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e8:	f021 010c 	bic.w	r1, r1, #12
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f2:	430b      	orrs	r3, r1
 80043f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	6999      	ldr	r1, [r3, #24]
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	ea40 0301 	orr.w	r3, r0, r1
 800440c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4bc5      	ldr	r3, [pc, #788]	; (8004728 <UART_SetConfig+0x384>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d004      	beq.n	8004422 <UART_SetConfig+0x7e>
 8004418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4bc3      	ldr	r3, [pc, #780]	; (800472c <UART_SetConfig+0x388>)
 800441e:	429a      	cmp	r2, r3
 8004420:	d103      	bne.n	800442a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004422:	f7fe fa8b 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8004426:	6778      	str	r0, [r7, #116]	; 0x74
 8004428:	e002      	b.n	8004430 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800442a:	f7fe fa73 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 800442e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004438:	f040 80b6 	bne.w	80045a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800443c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443e:	461c      	mov	r4, r3
 8004440:	f04f 0500 	mov.w	r5, #0
 8004444:	4622      	mov	r2, r4
 8004446:	462b      	mov	r3, r5
 8004448:	1891      	adds	r1, r2, r2
 800444a:	6439      	str	r1, [r7, #64]	; 0x40
 800444c:	415b      	adcs	r3, r3
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
 8004450:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004454:	1912      	adds	r2, r2, r4
 8004456:	eb45 0303 	adc.w	r3, r5, r3
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	00d9      	lsls	r1, r3, #3
 8004464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004468:	00d0      	lsls	r0, r2, #3
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	1911      	adds	r1, r2, r4
 8004470:	6639      	str	r1, [r7, #96]	; 0x60
 8004472:	416b      	adcs	r3, r5
 8004474:	667b      	str	r3, [r7, #100]	; 0x64
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	461a      	mov	r2, r3
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	1891      	adds	r1, r2, r2
 8004482:	63b9      	str	r1, [r7, #56]	; 0x38
 8004484:	415b      	adcs	r3, r3
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800448c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004490:	f7fb fee4 	bl	800025c <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4ba5      	ldr	r3, [pc, #660]	; (8004730 <UART_SetConfig+0x38c>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011e      	lsls	r6, r3, #4
 80044a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a4:	461c      	mov	r4, r3
 80044a6:	f04f 0500 	mov.w	r5, #0
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	6339      	str	r1, [r7, #48]	; 0x30
 80044b2:	415b      	adcs	r3, r3
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
 80044b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044ba:	1912      	adds	r2, r2, r4
 80044bc:	eb45 0303 	adc.w	r3, r5, r3
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	00d9      	lsls	r1, r3, #3
 80044ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ce:	00d0      	lsls	r0, r2, #3
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	1911      	adds	r1, r2, r4
 80044d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80044d8:	416b      	adcs	r3, r5
 80044da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80044ea:	415b      	adcs	r3, r3
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044f6:	f7fb feb1 	bl	800025c <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <UART_SetConfig+0x38c>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	; 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a87      	ldr	r2, [pc, #540]	; (8004730 <UART_SetConfig+0x38c>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004520:	441e      	add	r6, r3
 8004522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004524:	4618      	mov	r0, r3
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	1894      	adds	r4, r2, r2
 8004530:	623c      	str	r4, [r7, #32]
 8004532:	415b      	adcs	r3, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800453a:	1812      	adds	r2, r2, r0
 800453c:	eb41 0303 	adc.w	r3, r1, r3
 8004540:	f04f 0400 	mov.w	r4, #0
 8004544:	f04f 0500 	mov.w	r5, #0
 8004548:	00dd      	lsls	r5, r3, #3
 800454a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454e:	00d4      	lsls	r4, r2, #3
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	1814      	adds	r4, r2, r0
 8004556:	653c      	str	r4, [r7, #80]	; 0x50
 8004558:	414b      	adcs	r3, r1
 800455a:	657b      	str	r3, [r7, #84]	; 0x54
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	461a      	mov	r2, r3
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	1891      	adds	r1, r2, r2
 8004568:	61b9      	str	r1, [r7, #24]
 800456a:	415b      	adcs	r3, r3
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004576:	f7fb fe71 	bl	800025c <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <UART_SetConfig+0x38c>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2164      	movs	r1, #100	; 0x64
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a67      	ldr	r2, [pc, #412]	; (8004730 <UART_SetConfig+0x38c>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 0207 	and.w	r2, r3, #7
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4432      	add	r2, r6
 80045a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a6:	e0b9      	b.n	800471c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045aa:	461c      	mov	r4, r3
 80045ac:	f04f 0500 	mov.w	r5, #0
 80045b0:	4622      	mov	r2, r4
 80045b2:	462b      	mov	r3, r5
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	6139      	str	r1, [r7, #16]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045c0:	1912      	adds	r2, r2, r4
 80045c2:	eb45 0303 	adc.w	r3, r5, r3
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	00d9      	lsls	r1, r3, #3
 80045d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d4:	00d0      	lsls	r0, r2, #3
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	eb12 0804 	adds.w	r8, r2, r4
 80045de:	eb43 0905 	adc.w	r9, r3, r5
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	008b      	lsls	r3, r1, #2
 80045f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045fa:	0082      	lsls	r2, r0, #2
 80045fc:	4640      	mov	r0, r8
 80045fe:	4649      	mov	r1, r9
 8004600:	f7fb fe2c 	bl	800025c <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4b49      	ldr	r3, [pc, #292]	; (8004730 <UART_SetConfig+0x38c>)
 800460a:	fba3 2302 	umull	r2, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	011e      	lsls	r6, r3, #4
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	4618      	mov	r0, r3
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	1894      	adds	r4, r2, r2
 8004620:	60bc      	str	r4, [r7, #8]
 8004622:	415b      	adcs	r3, r3
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800462a:	1812      	adds	r2, r2, r0
 800462c:	eb41 0303 	adc.w	r3, r1, r3
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	f04f 0500 	mov.w	r5, #0
 8004638:	00dd      	lsls	r5, r3, #3
 800463a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463e:	00d4      	lsls	r4, r2, #3
 8004640:	4622      	mov	r2, r4
 8004642:	462b      	mov	r3, r5
 8004644:	1814      	adds	r4, r2, r0
 8004646:	64bc      	str	r4, [r7, #72]	; 0x48
 8004648:	414b      	adcs	r3, r1
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4618      	mov	r0, r3
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004664:	0082      	lsls	r2, r0, #2
 8004666:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800466a:	f7fb fdf7 	bl	800025c <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <UART_SetConfig+0x38c>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <UART_SetConfig+0x38c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004692:	441e      	add	r6, r3
 8004694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004696:	4618      	mov	r0, r3
 8004698:	f04f 0100 	mov.w	r1, #0
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	1894      	adds	r4, r2, r2
 80046a2:	603c      	str	r4, [r7, #0]
 80046a4:	415b      	adcs	r3, r3
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ac:	1812      	adds	r2, r2, r0
 80046ae:	eb41 0303 	adc.w	r3, r1, r3
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	f04f 0500 	mov.w	r5, #0
 80046ba:	00dd      	lsls	r5, r3, #3
 80046bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046c0:	00d4      	lsls	r4, r2, #3
 80046c2:	4622      	mov	r2, r4
 80046c4:	462b      	mov	r3, r5
 80046c6:	eb12 0a00 	adds.w	sl, r2, r0
 80046ca:	eb43 0b01 	adc.w	fp, r3, r1
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	008b      	lsls	r3, r1, #2
 80046e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046e6:	0082      	lsls	r2, r0, #2
 80046e8:	4650      	mov	r0, sl
 80046ea:	4659      	mov	r1, fp
 80046ec:	f7fb fdb6 	bl	800025c <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <UART_SetConfig+0x38c>)
 80046f6:	fba3 1302 	umull	r1, r3, r3, r2
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2164      	movs	r1, #100	; 0x64
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	3332      	adds	r3, #50	; 0x32
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <UART_SetConfig+0x38c>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4432      	add	r2, r6
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	377c      	adds	r7, #124	; 0x7c
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	40011000 	.word	0x40011000
 800472c:	40011400 	.word	0x40011400
 8004730:	51eb851f 	.word	0x51eb851f

08004734 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <_DoInit+0x98>)
 800473c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2203      	movs	r2, #3
 8004748:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <_DoInit+0x9c>)
 800474e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <_DoInit+0xa0>)
 8004754:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800475c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a17      	ldr	r2, [pc, #92]	; (80047d0 <_DoInit+0x9c>)
 8004774:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <_DoInit+0xa4>)
 800477a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2210      	movs	r2, #16
 8004780:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3307      	adds	r3, #7
 8004798:	4a10      	ldr	r2, [pc, #64]	; (80047dc <_DoInit+0xa8>)
 800479a:	6810      	ldr	r0, [r2, #0]
 800479c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800479e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <_DoInit+0xac>)
 80047a6:	6810      	ldr	r0, [r2, #0]
 80047a8:	6018      	str	r0, [r3, #0]
 80047aa:	8891      	ldrh	r1, [r2, #4]
 80047ac:	7992      	ldrb	r2, [r2, #6]
 80047ae:	8099      	strh	r1, [r3, #4]
 80047b0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80047b2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80047bc:	f3bf 8f5f 	dmb	sy
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20000d4c 	.word	0x20000d4c
 80047d0:	08005874 	.word	0x08005874
 80047d4:	20000038 	.word	0x20000038
 80047d8:	20000438 	.word	0x20000438
 80047dc:	08005880 	.word	0x08005880
 80047e0:	08005884 	.word	0x08005884

080047e4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	; 0x30
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80047f0:	4b3e      	ldr	r3, [pc, #248]	; (80048ec <SEGGER_RTT_ReadNoLock+0x108>)
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <SEGGER_RTT_ReadNoLock+0x1e>
 80047fe:	f7ff ff99 	bl	8004734 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	4a37      	ldr	r2, [pc, #220]	; (80048ec <SEGGER_RTT_ReadNoLock+0x108>)
 8004810:	4413      	add	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004824:	2300      	movs	r3, #0
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d92b      	bls.n	8004888 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4293      	cmp	r3, r2
 8004840:	bf28      	it	cs
 8004842:	4613      	movcs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	4413      	add	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6939      	ldr	r1, [r7, #16]
 8004854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004856:	f000 ffe3 	bl	8005820 <memcpy>
    NumBytesRead += NumBytesRem;
 800485a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4413      	add	r3, r2
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4413      	add	r3, r2
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004880:	429a      	cmp	r2, r3
 8004882:	d101      	bne.n	8004888 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004884:	2300      	movs	r3, #0
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4293      	cmp	r3, r2
 8004896:	bf28      	it	cs
 8004898:	4613      	movcs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d019      	beq.n	80048d6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	4413      	add	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	6939      	ldr	r1, [r7, #16]
 80048b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b2:	f000 ffb5 	bl	8005820 <memcpy>
    NumBytesRead += NumBytesRem;
 80048b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4413      	add	r3, r2
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80048be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80048ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4413      	add	r3, r2
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3730      	adds	r7, #48	; 0x30
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000d4c 	.word	0x20000d4c

080048f0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <SEGGER_RTT_AllocUpBuffer+0x20>
 800490c:	f7ff ff12 	bl	8004734 <_DoInit>
  SEGGER_RTT_LOCK();
 8004910:	f3ef 8311 	mrs	r3, BASEPRI
 8004914:	f04f 0120 	mov.w	r1, #32
 8004918:	f381 8811 	msr	BASEPRI, r1
 800491c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800491e:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004920:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004926:	6939      	ldr	r1, [r7, #16]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	3304      	adds	r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	dbeb      	blt.n	8004926 <SEGGER_RTT_AllocUpBuffer+0x36>
 800494e:	e000      	b.n	8004952 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004950:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	429a      	cmp	r2, r3
 800495a:	da3f      	bge.n	80049dc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800495c:	6939      	ldr	r1, [r7, #16]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	3304      	adds	r3, #4
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004986:	6939      	ldr	r1, [r7, #16]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	4613      	mov	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4413      	add	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	440b      	add	r3, r1
 8004994:	3320      	adds	r3, #32
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	440b      	add	r3, r1
 80049a8:	3328      	adds	r3, #40	; 0x28
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	3324      	adds	r3, #36	; 0x24
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80049c2:	6939      	ldr	r1, [r7, #16]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	332c      	adds	r3, #44	; 0x2c
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049d6:	f3bf 8f5f 	dmb	sy
 80049da:	e002      	b.n	80049e2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80049e8:	69fb      	ldr	r3, [r7, #28]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000d4c 	.word	0x20000d4c

080049f8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004a14:	f7ff fe8e 	bl	8004734 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a18:	4b2e      	ldr	r3, [pc, #184]	; (8004ad4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004a1a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	461a      	mov	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d24d      	bcs.n	8004ac4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004a28:	f3ef 8311 	mrs	r3, BASEPRI
 8004a2c:	f04f 0120 	mov.w	r1, #32
 8004a30:	f381 8811 	msr	BASEPRI, r1
 8004a34:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d031      	beq.n	8004aa0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004a3c:	6979      	ldr	r1, [r7, #20]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	440b      	add	r3, r1
 8004a4a:	3360      	adds	r3, #96	; 0x60
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a50:	6979      	ldr	r1, [r7, #20]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3364      	adds	r3, #100	; 0x64
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	440b      	add	r3, r1
 8004a72:	3368      	adds	r3, #104	; 0x68
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3370      	adds	r3, #112	; 0x70
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4613      	mov	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	336c      	adds	r3, #108	; 0x6c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	440b      	add	r3, r1
 8004aae:	3374      	adds	r3, #116	; 0x74
 8004ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ab4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e002      	b.n	8004aca <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004aca:	69fb      	ldr	r3, [r7, #28]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000d4c 	.word	0x20000d4c

08004ad8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ae8:	e002      	b.n	8004af0 <_EncodeStr+0x18>
    Len++;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3301      	adds	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f6      	bne.n	8004aea <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d901      	bls.n	8004b08 <_EncodeStr+0x30>
    Len = Limit;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2bfe      	cmp	r3, #254	; 0xfe
 8004b0c:	d806      	bhi.n	8004b1c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	60fa      	str	r2, [r7, #12]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e011      	b.n	8004b40 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	60fa      	str	r2, [r7, #12]
 8004b22:	22ff      	movs	r2, #255	; 0xff
 8004b24:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	60fa      	str	r2, [r7, #12]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	0a19      	lsrs	r1, r3, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	60fa      	str	r2, [r7, #12]
 8004b3c:	b2ca      	uxtb	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004b44:	e00a      	b.n	8004b5c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	1c53      	adds	r3, r2, #1
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	60f9      	str	r1, [r7, #12]
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	701a      	strb	r2, [r3, #0]
    n++;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3f0      	bcc.n	8004b46 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <_HandleIncomingPacket+0xe0>)
 8004b94:	7e1b      	ldrb	r3, [r3, #24]
 8004b96:	4618      	mov	r0, r3
 8004b98:	1cfb      	adds	r3, r7, #3
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f7ff fe21 	bl	80047e4 <SEGGER_RTT_ReadNoLock>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	dd54      	ble.n	8004c56 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d032      	beq.n	8004c18 <_HandleIncomingPacket+0x8c>
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	dc42      	bgt.n	8004c3c <_HandleIncomingPacket+0xb0>
 8004bb6:	2b07      	cmp	r3, #7
 8004bb8:	dc16      	bgt.n	8004be8 <_HandleIncomingPacket+0x5c>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dd3e      	ble.n	8004c3c <_HandleIncomingPacket+0xb0>
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d83b      	bhi.n	8004c3c <_HandleIncomingPacket+0xb0>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <_HandleIncomingPacket+0x40>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bef 	.word	0x08004bef
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004bfb 	.word	0x08004bfb
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bea:	d036      	beq.n	8004c5a <_HandleIncomingPacket+0xce>
 8004bec:	e026      	b.n	8004c3c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004bee:	f000 fa9f 	bl	8005130 <SEGGER_SYSVIEW_Start>
      break;
 8004bf2:	e037      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004bf4:	f000 fb56 	bl	80052a4 <SEGGER_SYSVIEW_Stop>
      break;
 8004bf8:	e034      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004bfa:	f000 fc4b 	bl	8005494 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004bfe:	e031      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c00:	f000 fc10 	bl	8005424 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c04:	e02e      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c06:	f000 fb73 	bl	80052f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c0a:	e02b      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c0c:	f000 fd70 	bl	80056f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c10:	e028      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c12:	f000 fd4f 	bl	80056b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004c16:	e025      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <_HandleIncomingPacket+0xe0>)
 8004c1a:	7e1b      	ldrb	r3, [r3, #24]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	1cfb      	adds	r3, r7, #3
 8004c20:	2201      	movs	r2, #1
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7ff fdde 	bl	80047e4 <SEGGER_RTT_ReadNoLock>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dd15      	ble.n	8004c5e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fcbd 	bl	80055b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004c3a:	e010      	b.n	8004c5e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	b25b      	sxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da0e      	bge.n	8004c62 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <_HandleIncomingPacket+0xe0>)
 8004c46:	7e1b      	ldrb	r3, [r3, #24]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	1cfb      	adds	r3, r7, #3
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7ff fdc8 	bl	80047e4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004c54:	e005      	b.n	8004c62 <_HandleIncomingPacket+0xd6>
    }
  }
 8004c56:	bf00      	nop
 8004c58:	e004      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <_HandleIncomingPacket+0xd8>
      break;
 8004c62:	bf00      	nop
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000850 	.word	0x20000850

08004c70 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	; 0x30
 8004c74:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004c76:	2301      	movs	r3, #1
 8004c78:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004c7a:	1d3b      	adds	r3, r7, #4
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c84:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8a:	e00b      	b.n	8004ca4 <_TrySendOverflowPacket+0x34>
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	09db      	lsrs	r3, r3, #7
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca8:	d8f0      	bhi.n	8004c8c <_TrySendOverflowPacket+0x1c>
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cba:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <_TrySendOverflowPacket+0xe0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	e00b      	b.n	8004cec <_TrySendOverflowPacket+0x7c>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	6279      	str	r1, [r7, #36]	; 0x24
 8004cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	09db      	lsrs	r3, r3, #7
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf0:	d8f0      	bhi.n	8004cd4 <_TrySendOverflowPacket+0x64>
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	627a      	str	r2, [r7, #36]	; 0x24
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	4618      	mov	r0, r3
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	1d3b      	adds	r3, r7, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb fa58 	bl	80001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d22:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e004      	b.n	8004d40 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <_TrySendOverflowPacket+0xdc>)
 8004d3e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004d40:	693b      	ldr	r3, [r7, #16]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3730      	adds	r7, #48	; 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000850 	.word	0x20000850
 8004d50:	e0001004 	.word	0xe0001004

08004d54 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08a      	sub	sp, #40	; 0x28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004d60:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <_SendPacket+0x1c0>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d010      	beq.n	8004d8a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <_SendPacket+0x1c0>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80a3 	beq.w	8004eb8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004d72:	4b68      	ldr	r3, [pc, #416]	; (8004f14 <_SendPacket+0x1c0>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d109      	bne.n	8004d8e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004d7a:	f7ff ff79 	bl	8004c70 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004d7e:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <_SendPacket+0x1c0>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	f040 809a 	bne.w	8004ebc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004d88:	e001      	b.n	8004d8e <_SendPacket+0x3a>
    goto Send;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <_SendPacket+0x3c>
Send:
 8004d8e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b1f      	cmp	r3, #31
 8004d94:	d809      	bhi.n	8004daa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004d96:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <_SendPacket+0x1c0>)
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 808b 	bne.w	8004ec0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b17      	cmp	r3, #23
 8004dae:	d807      	bhi.n	8004dc0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e03d      	b.n	8004e3c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b7f      	cmp	r3, #127	; 0x7f
 8004dcc:	d912      	bls.n	8004df4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	09da      	lsrs	r2, r3, #7
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	3a01      	subs	r2, #1
 8004de6:	60fa      	str	r2, [r7, #12]
 8004de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e006      	b.n	8004e02 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b7f      	cmp	r3, #127	; 0x7f
 8004e06:	d912      	bls.n	8004e2e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	09da      	lsrs	r2, r3, #7
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	60fa      	str	r2, [r7, #12]
 8004e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e006      	b.n	8004e3c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <_SendPacket+0x1c4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e42:	4b34      	ldr	r3, [pc, #208]	; (8004f14 <_SendPacket+0x1c0>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	e00b      	b.n	8004e6e <_SendPacket+0x11a>
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	1c59      	adds	r1, r3, #1
 8004e5e:	6279      	str	r1, [r7, #36]	; 0x24
 8004e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	09db      	lsrs	r3, r3, #7
 8004e6c:	623b      	str	r3, [r7, #32]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	2b7f      	cmp	r3, #127	; 0x7f
 8004e72:	d8f0      	bhi.n	8004e56 <_SendPacket+0x102>
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	627a      	str	r2, [r7, #36]	; 0x24
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004e84:	4b23      	ldr	r3, [pc, #140]	; (8004f14 <_SendPacket+0x1c0>)
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	f7fb f998 	bl	80001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <_SendPacket+0x1c0>)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	60d3      	str	r3, [r2, #12]
 8004ea8:	e00b      	b.n	8004ec2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <_SendPacket+0x1c0>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <_SendPacket+0x1c0>)
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e004      	b.n	8004ec2 <_SendPacket+0x16e>
    goto SendDone;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <_SendPacket+0x16e>
      goto SendDone;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <_SendPacket+0x16e>
      goto SendDone;
 8004ec0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <_SendPacket+0x1c0>)
 8004ec4:	7e1b      	ldrb	r3, [r3, #24]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <_SendPacket+0x1c8>)
 8004eca:	460b      	mov	r3, r1
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	440b      	add	r3, r1
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	336c      	adds	r3, #108	; 0x6c
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <_SendPacket+0x1c0>)
 8004eda:	7e1b      	ldrb	r3, [r3, #24]
 8004edc:	4618      	mov	r0, r3
 8004ede:	490f      	ldr	r1, [pc, #60]	; (8004f1c <_SendPacket+0x1c8>)
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4403      	add	r3, r0
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	440b      	add	r3, r1
 8004eea:	3370      	adds	r3, #112	; 0x70
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d00b      	beq.n	8004f0a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <_SendPacket+0x1c0>)
 8004ef4:	789b      	ldrb	r3, [r3, #2]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d107      	bne.n	8004f0a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <_SendPacket+0x1c0>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f00:	f7ff fe44 	bl	8004b8c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <_SendPacket+0x1c0>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f0a:	bf00      	nop
 8004f0c:	3728      	adds	r7, #40	; 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000850 	.word	0x20000850
 8004f18:	e0001004 	.word	0xe0001004
 8004f1c:	20000d4c 	.word	0x20000d4c

08004f20 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f34:	4917      	ldr	r1, [pc, #92]	; (8004f94 <SEGGER_SYSVIEW_Init+0x74>)
 8004f36:	4818      	ldr	r0, [pc, #96]	; (8004f98 <SEGGER_SYSVIEW_Init+0x78>)
 8004f38:	f7ff fcda 	bl	80048f0 <SEGGER_RTT_AllocUpBuffer>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f42:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f46:	785a      	ldrb	r2, [r3, #1]
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f4a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	4618      	mov	r0, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2308      	movs	r3, #8
 8004f58:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <SEGGER_SYSVIEW_Init+0x80>)
 8004f5a:	490f      	ldr	r1, [pc, #60]	; (8004f98 <SEGGER_SYSVIEW_Init+0x78>)
 8004f5c:	f7ff fd4c 	bl	80049f8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <SEGGER_SYSVIEW_Init+0x84>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f6c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004f6e:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004f7a:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004f80:	4a06      	ldr	r2, [pc, #24]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000448 	.word	0x20000448
 8004f98:	0800588c 	.word	0x0800588c
 8004f9c:	20000850 	.word	0x20000850
 8004fa0:	20000848 	.word	0x20000848
 8004fa4:	e0001004 	.word	0xe0001004

08004fa8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6113      	str	r3, [r2, #16]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000850 	.word	0x20000850

08004fc8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd4:	f04f 0120 	mov.w	r1, #32
 8004fd8:	f381 8811 	msr	BASEPRI, r1
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	4808      	ldr	r0, [pc, #32]	; (8005000 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004fe0:	f7ff fdc7 	bl	8004b72 <_PreparePacket>
 8004fe4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f7ff feb2 	bl	8004d54 <_SendPacket>
  RECORD_END();
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f383 8811 	msr	BASEPRI, r3
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000880 	.word	0x20000880

08005004 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800500e:	f3ef 8311 	mrs	r3, BASEPRI
 8005012:	f04f 0120 	mov.w	r1, #32
 8005016:	f381 8811 	msr	BASEPRI, r1
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	4816      	ldr	r0, [pc, #88]	; (8005078 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800501e:	f7ff fda8 	bl	8004b72 <_PreparePacket>
 8005022:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e00b      	b.n	800504a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	1c59      	adds	r1, r3, #1
 800503a:	61f9      	str	r1, [r7, #28]
 800503c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	09db      	lsrs	r3, r3, #7
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b7f      	cmp	r3, #127	; 0x7f
 800504e:	d8f0      	bhi.n	8005032 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	6938      	ldr	r0, [r7, #16]
 8005066:	f7ff fe75 	bl	8004d54 <_SendPacket>
  RECORD_END();
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f383 8811 	msr	BASEPRI, r3
}
 8005070:	bf00      	nop
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000880 	.word	0x20000880

0800507c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b08c      	sub	sp, #48	; 0x30
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005088:	f3ef 8311 	mrs	r3, BASEPRI
 800508c:	f04f 0120 	mov.w	r1, #32
 8005090:	f381 8811 	msr	BASEPRI, r1
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	4825      	ldr	r0, [pc, #148]	; (800512c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005098:	f7ff fd6b 	bl	8004b72 <_PreparePacket>
 800509c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050aa:	e00b      	b.n	80050c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	1c59      	adds	r1, r3, #1
 80050b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	09db      	lsrs	r3, r3, #7
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b7f      	cmp	r3, #127	; 0x7f
 80050c8:	d8f0      	bhi.n	80050ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e00b      	b.n	80050fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	6279      	str	r1, [r7, #36]	; 0x24
 80050ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	09db      	lsrs	r3, r3, #7
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005100:	d8f0      	bhi.n	80050e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	627a      	str	r2, [r7, #36]	; 0x24
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	6979      	ldr	r1, [r7, #20]
 8005116:	69b8      	ldr	r0, [r7, #24]
 8005118:	f7ff fe1c 	bl	8004d54 <_SendPacket>
  RECORD_END();
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f383 8811 	msr	BASEPRI, r3
}
 8005122:	bf00      	nop
 8005124:	3730      	adds	r7, #48	; 0x30
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000880 	.word	0x20000880

08005130 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005136:	4b58      	ldr	r3, [pc, #352]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800513c:	f3ef 8311 	mrs	r3, BASEPRI
 8005140:	f04f 0120 	mov.w	r1, #32
 8005144:	f381 8811 	msr	BASEPRI, r1
 8005148:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800514a:	4b53      	ldr	r3, [pc, #332]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	220a      	movs	r2, #10
 8005150:	4952      	ldr	r1, [pc, #328]	; (800529c <SEGGER_SYSVIEW_Start+0x16c>)
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb f838 	bl	80001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800515e:	200a      	movs	r0, #10
 8005160:	f7ff ff32 	bl	8004fc8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005164:	f3ef 8311 	mrs	r3, BASEPRI
 8005168:	f04f 0120 	mov.w	r1, #32
 800516c:	f381 8811 	msr	BASEPRI, r1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	484b      	ldr	r0, [pc, #300]	; (80052a0 <SEGGER_SYSVIEW_Start+0x170>)
 8005174:	f7ff fcfd 	bl	8004b72 <_PreparePacket>
 8005178:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005182:	4b45      	ldr	r3, [pc, #276]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
 8005188:	e00b      	b.n	80051a2 <SEGGER_SYSVIEW_Start+0x72>
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	b2da      	uxtb	r2, r3
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	1c59      	adds	r1, r3, #1
 8005192:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	09db      	lsrs	r3, r3, #7
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	2b7f      	cmp	r3, #127	; 0x7f
 80051a6:	d8f0      	bhi.n	800518a <SEGGER_SYSVIEW_Start+0x5a>
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
 80051bc:	4b36      	ldr	r3, [pc, #216]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	e00b      	b.n	80051dc <SEGGER_SYSVIEW_Start+0xac>
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	1c59      	adds	r1, r3, #1
 80051cc:	6279      	str	r1, [r7, #36]	; 0x24
 80051ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	09db      	lsrs	r3, r3, #7
 80051da:	623b      	str	r3, [r7, #32]
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	2b7f      	cmp	r3, #127	; 0x7f
 80051e0:	d8f0      	bhi.n	80051c4 <SEGGER_SYSVIEW_Start+0x94>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	627a      	str	r2, [r7, #36]	; 0x24
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e00b      	b.n	8005216 <SEGGER_SYSVIEW_Start+0xe6>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1c59      	adds	r1, r3, #1
 8005206:	61f9      	str	r1, [r7, #28]
 8005208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	09db      	lsrs	r3, r3, #7
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b7f      	cmp	r3, #127	; 0x7f
 800521a:	d8f0      	bhi.n	80051fe <SEGGER_SYSVIEW_Start+0xce>
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	61fa      	str	r2, [r7, #28]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	2300      	movs	r3, #0
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	e00b      	b.n	800524e <SEGGER_SYSVIEW_Start+0x11e>
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	1c59      	adds	r1, r3, #1
 800523e:	6179      	str	r1, [r7, #20]
 8005240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	09db      	lsrs	r3, r3, #7
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b7f      	cmp	r3, #127	; 0x7f
 8005252:	d8f0      	bhi.n	8005236 <SEGGER_SYSVIEW_Start+0x106>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	617a      	str	r2, [r7, #20]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005264:	2218      	movs	r2, #24
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fd73 	bl	8004d54 <_SendPacket>
      RECORD_END();
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005274:	4b08      	ldr	r3, [pc, #32]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <SEGGER_SYSVIEW_Start+0x168>)
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005282:	f000 f907 	bl	8005494 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005286:	f000 f8cd 	bl	8005424 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800528a:	f000 fa31 	bl	80056f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800528e:	bf00      	nop
 8005290:	3730      	adds	r7, #48	; 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000850 	.word	0x20000850
 800529c:	08005914 	.word	0x08005914
 80052a0:	20000880 	.word	0x20000880

080052a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052aa:	f3ef 8311 	mrs	r3, BASEPRI
 80052ae:	f04f 0120 	mov.w	r1, #32
 80052b2:	f381 8811 	msr	BASEPRI, r1
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	480b      	ldr	r0, [pc, #44]	; (80052e8 <SEGGER_SYSVIEW_Stop+0x44>)
 80052ba:	f7ff fc5a 	bl	8004b72 <_PreparePacket>
 80052be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <SEGGER_SYSVIEW_Stop+0x48>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80052c8:	220b      	movs	r2, #11
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6838      	ldr	r0, [r7, #0]
 80052ce:	f7ff fd41 	bl	8004d54 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <SEGGER_SYSVIEW_Stop+0x48>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f383 8811 	msr	BASEPRI, r3
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000880 	.word	0x20000880
 80052ec:	20000850 	.word	0x20000850

080052f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80052f6:	f3ef 8311 	mrs	r3, BASEPRI
 80052fa:	f04f 0120 	mov.w	r1, #32
 80052fe:	f381 8811 	msr	BASEPRI, r1
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	4845      	ldr	r0, [pc, #276]	; (800541c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005306:	f7ff fc34 	bl	8004b72 <_PreparePacket>
 800530a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005314:	4b42      	ldr	r3, [pc, #264]	; (8005420 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
 800531a:	e00b      	b.n	8005334 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	b2da      	uxtb	r2, r3
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	1c59      	adds	r1, r3, #1
 8005324:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	09db      	lsrs	r3, r3, #7
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	2b7f      	cmp	r3, #127	; 0x7f
 8005338:	d8f0      	bhi.n	800531c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	4b34      	ldr	r3, [pc, #208]	; (8005420 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	e00b      	b.n	800536e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	1c59      	adds	r1, r3, #1
 800535e:	6279      	str	r1, [r7, #36]	; 0x24
 8005360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	09db      	lsrs	r3, r3, #7
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	2b7f      	cmp	r3, #127	; 0x7f
 8005372:	d8f0      	bhi.n	8005356 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	627a      	str	r2, [r7, #36]	; 0x24
 800537a:	6a3a      	ldr	r2, [r7, #32]
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e00b      	b.n	80053a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	1c59      	adds	r1, r3, #1
 8005398:	61f9      	str	r1, [r7, #28]
 800539a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	09db      	lsrs	r3, r3, #7
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b7f      	cmp	r3, #127	; 0x7f
 80053ac:	d8f0      	bhi.n	8005390 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	61fa      	str	r2, [r7, #28]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	e00b      	b.n	80053e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	6179      	str	r1, [r7, #20]
 80053d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	09db      	lsrs	r3, r3, #7
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b7f      	cmp	r3, #127	; 0x7f
 80053e4:	d8f0      	bhi.n	80053c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	617a      	str	r2, [r7, #20]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80053f6:	2218      	movs	r2, #24
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	f7ff fcaa 	bl	8004d54 <_SendPacket>
  RECORD_END();
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800540e:	4b04      	ldr	r3, [pc, #16]	; (8005420 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	4798      	blx	r3
  }
}
 8005414:	bf00      	nop
 8005416:	3730      	adds	r7, #48	; 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000880 	.word	0x20000880
 8005420:	20000850 	.word	0x20000850

08005424 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800543a:	4b03      	ldr	r3, [pc, #12]	; (8005448 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4798      	blx	r3
  }
}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000850 	.word	0x20000850

0800544c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005454:	f3ef 8311 	mrs	r3, BASEPRI
 8005458:	f04f 0120 	mov.w	r1, #32
 800545c:	f381 8811 	msr	BASEPRI, r1
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	480b      	ldr	r0, [pc, #44]	; (8005490 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005464:	f7ff fb85 	bl	8004b72 <_PreparePacket>
 8005468:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	6938      	ldr	r0, [r7, #16]
 8005470:	f7ff fb32 	bl	8004ad8 <_EncodeStr>
 8005474:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005476:	220e      	movs	r2, #14
 8005478:	68f9      	ldr	r1, [r7, #12]
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f7ff fc6a 	bl	8004d54 <_SendPacket>
  RECORD_END();
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f383 8811 	msr	BASEPRI, r3
}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000880 	.word	0x20000880

08005494 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01a      	beq.n	80054d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054ac:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4798      	blx	r3
 80054b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	000a      	movs	r2, r1
 80054c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054ca:	4613      	mov	r3, r2
 80054cc:	461a      	mov	r2, r3
 80054ce:	4621      	mov	r1, r4
 80054d0:	200d      	movs	r0, #13
 80054d2:	f7ff fdd3 	bl	800507c <SEGGER_SYSVIEW_RecordU32x2>
 80054d6:	e006      	b.n	80054e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4619      	mov	r1, r3
 80054de:	200c      	movs	r0, #12
 80054e0:	f7ff fd90 	bl	8005004 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000850 	.word	0x20000850
 80054f4:	e0001004 	.word	0xe0001004

080054f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005502:	f04f 0120 	mov.w	r1, #32
 8005506:	f381 8811 	msr	BASEPRI, r1
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	4819      	ldr	r0, [pc, #100]	; (8005574 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800550e:	f7ff fb30 	bl	8004b72 <_PreparePacket>
 8005512:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005520:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e00b      	b.n	8005544 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	b2da      	uxtb	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	6179      	str	r1, [r7, #20]
 8005536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b7f      	cmp	r3, #127	; 0x7f
 8005548:	d8f0      	bhi.n	800552c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	617a      	str	r2, [r7, #20]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800555a:	2202      	movs	r2, #2
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	68b8      	ldr	r0, [r7, #8]
 8005560:	f7ff fbf8 	bl	8004d54 <_SendPacket>
  RECORD_END();
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f383 8811 	msr	BASEPRI, r3
}
 800556a:	bf00      	nop
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000880 	.word	0x20000880
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005582:	f3ef 8311 	mrs	r3, BASEPRI
 8005586:	f04f 0120 	mov.w	r1, #32
 800558a:	f381 8811 	msr	BASEPRI, r1
 800558e:	607b      	str	r3, [r7, #4]
 8005590:	4807      	ldr	r0, [pc, #28]	; (80055b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005592:	f7ff faee 	bl	8004b72 <_PreparePacket>
 8005596:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005598:	2203      	movs	r2, #3
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6838      	ldr	r0, [r7, #0]
 800559e:	f7ff fbd9 	bl	8004d54 <_SendPacket>
  RECORD_END();
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f383 8811 	msr	BASEPRI, r3
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000880 	.word	0x20000880

080055b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80055be:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d06d      	beq.n	80056a2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80055c6:	4b39      	ldr	r3, [pc, #228]	; (80056ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80055cc:	2300      	movs	r3, #0
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d0:	e008      	b.n	80055e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	3301      	adds	r3, #1
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d3f2      	bcc.n	80055d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80055ec:	e000      	b.n	80055f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80055ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d055      	beq.n	80056a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055f6:	f3ef 8311 	mrs	r3, BASEPRI
 80055fa:	f04f 0120 	mov.w	r1, #32
 80055fe:	f381 8811 	msr	BASEPRI, r1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	482a      	ldr	r0, [pc, #168]	; (80056b0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005606:	f7ff fab4 	bl	8004b72 <_PreparePacket>
 800560a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	e00b      	b.n	8005632 <SEGGER_SYSVIEW_SendModule+0x7e>
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	6279      	str	r1, [r7, #36]	; 0x24
 8005624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	09db      	lsrs	r3, r3, #7
 8005630:	623b      	str	r3, [r7, #32]
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	2b7f      	cmp	r3, #127	; 0x7f
 8005636:	d8f0      	bhi.n	800561a <SEGGER_SYSVIEW_SendModule+0x66>
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	627a      	str	r2, [r7, #36]	; 0x24
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e00b      	b.n	800566c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	1c59      	adds	r1, r3, #1
 800565c:	61f9      	str	r1, [r7, #28]
 800565e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	09db      	lsrs	r3, r3, #7
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b7f      	cmp	r3, #127	; 0x7f
 8005670:	d8f0      	bhi.n	8005654 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	61fa      	str	r2, [r7, #28]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	4619      	mov	r1, r3
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff fa24 	bl	8004ad8 <_EncodeStr>
 8005690:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005692:	2216      	movs	r2, #22
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	6938      	ldr	r0, [r7, #16]
 8005698:	f7ff fb5c 	bl	8004d54 <_SendPacket>
      RECORD_END();
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80056a2:	bf00      	nop
 80056a4:	3730      	adds	r7, #48	; 0x30
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000878 	.word	0x20000878
 80056b0:	20000880 	.word	0x20000880

080056b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80056ba:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00f      	beq.n	80056e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f2      	bne.n	80056c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000878 	.word	0x20000878

080056f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80056f6:	f3ef 8311 	mrs	r3, BASEPRI
 80056fa:	f04f 0120 	mov.w	r1, #32
 80056fe:	f381 8811 	msr	BASEPRI, r1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	4817      	ldr	r0, [pc, #92]	; (8005764 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005706:	f7ff fa34 	bl	8004b72 <_PreparePacket>
 800570a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	4b14      	ldr	r3, [pc, #80]	; (8005768 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	e00b      	b.n	8005734 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1c59      	adds	r1, r3, #1
 8005724:	6179      	str	r1, [r7, #20]
 8005726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	09db      	lsrs	r3, r3, #7
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b7f      	cmp	r3, #127	; 0x7f
 8005738:	d8f0      	bhi.n	800571c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	617a      	str	r2, [r7, #20]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800574a:	221b      	movs	r2, #27
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68b8      	ldr	r0, [r7, #8]
 8005750:	f7ff fb00 	bl	8004d54 <_SendPacket>
  RECORD_END();
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f383 8811 	msr	BASEPRI, r3
}
 800575a:	bf00      	nop
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000880 	.word	0x20000880
 8005768:	2000087c 	.word	0x2000087c

0800576c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",O=NoOS,D="SYSVIEW_DEVICE_NAME);
 8005770:	4803      	ldr	r0, [pc, #12]	; (8005780 <_cbSendSystemDesc+0x14>)
 8005772:	f7ff fe6b 	bl	800544c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick,I#45=TIM3,I#27=DMA1_Stream0,I#44=TIM2,I#143=ADC3");
 8005776:	4803      	ldr	r0, [pc, #12]	; (8005784 <_cbSendSystemDesc+0x18>)
 8005778:	f7ff fe68 	bl	800544c <SEGGER_SYSVIEW_SendSysDesc>
}
 800577c:	bf00      	nop
 800577e:	bd80      	pop	{r7, pc}
 8005780:	08005894 	.word	0x08005894
 8005784:	080058bc 	.word	0x080058bc

08005788 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
#endif
  //
  //  The cycle counter must be activated in order
  //  to use time related functions.
  //
  if ((DWT_CTRL & NOCYCCNT_BIT) == 0) {       // Cycle counter supported?
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <SEGGER_SYSVIEW_Conf+0x44>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <SEGGER_SYSVIEW_Conf+0x28>
    if ((DWT_CTRL & CYCCNTENA_BIT) == 0) {    // Cycle counter not enabled?
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <SEGGER_SYSVIEW_Conf+0x44>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <SEGGER_SYSVIEW_Conf+0x28>
      DWT_CTRL |= CYCCNTENA_BIT;              // Enable Cycle counter
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <SEGGER_SYSVIEW_Conf+0x44>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a08      	ldr	r2, [pc, #32]	; (80057cc <SEGGER_SYSVIEW_Conf+0x44>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6013      	str	r3, [r2, #0]
    }
  }
#endif
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <SEGGER_SYSVIEW_Conf+0x48>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <SEGGER_SYSVIEW_Conf+0x48>)
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <SEGGER_SYSVIEW_Conf+0x4c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	f7ff fbb0 	bl	8004f20 <SEGGER_SYSVIEW_Init>
                      0, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80057c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80057c4:	f7ff fbf0 	bl	8004fa8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	e0001000 	.word	0xe0001000
 80057d0:	2000000c 	.word	0x2000000c
 80057d4:	0800576d 	.word	0x0800576d

080057d8 <__libc_init_array>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4d0d      	ldr	r5, [pc, #52]	; (8005810 <__libc_init_array+0x38>)
 80057dc:	4c0d      	ldr	r4, [pc, #52]	; (8005814 <__libc_init_array+0x3c>)
 80057de:	1b64      	subs	r4, r4, r5
 80057e0:	10a4      	asrs	r4, r4, #2
 80057e2:	2600      	movs	r6, #0
 80057e4:	42a6      	cmp	r6, r4
 80057e6:	d109      	bne.n	80057fc <__libc_init_array+0x24>
 80057e8:	4d0b      	ldr	r5, [pc, #44]	; (8005818 <__libc_init_array+0x40>)
 80057ea:	4c0c      	ldr	r4, [pc, #48]	; (800581c <__libc_init_array+0x44>)
 80057ec:	f000 f82e 	bl	800584c <_init>
 80057f0:	1b64      	subs	r4, r4, r5
 80057f2:	10a4      	asrs	r4, r4, #2
 80057f4:	2600      	movs	r6, #0
 80057f6:	42a6      	cmp	r6, r4
 80057f8:	d105      	bne.n	8005806 <__libc_init_array+0x2e>
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005800:	4798      	blx	r3
 8005802:	3601      	adds	r6, #1
 8005804:	e7ee      	b.n	80057e4 <__libc_init_array+0xc>
 8005806:	f855 3b04 	ldr.w	r3, [r5], #4
 800580a:	4798      	blx	r3
 800580c:	3601      	adds	r6, #1
 800580e:	e7f2      	b.n	80057f6 <__libc_init_array+0x1e>
 8005810:	08005928 	.word	0x08005928
 8005814:	08005928 	.word	0x08005928
 8005818:	08005928 	.word	0x08005928
 800581c:	0800592c 	.word	0x0800592c

08005820 <memcpy>:
 8005820:	440a      	add	r2, r1
 8005822:	4291      	cmp	r1, r2
 8005824:	f100 33ff 	add.w	r3, r0, #4294967295
 8005828:	d100      	bne.n	800582c <memcpy+0xc>
 800582a:	4770      	bx	lr
 800582c:	b510      	push	{r4, lr}
 800582e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005836:	4291      	cmp	r1, r2
 8005838:	d1f9      	bne.n	800582e <memcpy+0xe>
 800583a:	bd10      	pop	{r4, pc}

0800583c <memset>:
 800583c:	4402      	add	r2, r0
 800583e:	4603      	mov	r3, r0
 8005840:	4293      	cmp	r3, r2
 8005842:	d100      	bne.n	8005846 <memset+0xa>
 8005844:	4770      	bx	lr
 8005846:	f803 1b01 	strb.w	r1, [r3], #1
 800584a:	e7f9      	b.n	8005840 <memset+0x4>

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
