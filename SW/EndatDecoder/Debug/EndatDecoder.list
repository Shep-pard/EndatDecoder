
EndatDecoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005610  08005610  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005618  08005618  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000d4c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d5c  20000d5c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177de  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1b  00000000  00000000  0003781e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001190  00000000  00000000  0003b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020100  00000000  00000000  0003c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145b1  00000000  00000000  0005c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c516b  00000000  00000000  00070e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00135fb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed0  00000000  00000000  00136008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800553c 	.word	0x0800553c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800553c 	.word	0x0800553c

080001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001c8:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001ca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001ce:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000258 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001d6:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001da:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001dc:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001de:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e0:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001e2:	d332      	bcc.n	800024a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001e4:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001e6:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001e8:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001ea:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001ec:	d314      	bcc.n	8000218 <_CheckCase2>

080001ee <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001ee:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f0:	19d0      	adds	r0, r2, r7
 80001f2:	bf00      	nop

080001f4 <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001f8:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001fc:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001fe:	d005      	beq.n	800020c <_CSDone>
        LDRB     R3,[R1], #+1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000204:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000208:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 800020a:	d1f3      	bne.n	80001f4 <_LoopCopyStraight>

0800020c <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 800020c:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000210:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000212:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000214:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000216:	4770      	bx	lr

08000218 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000218:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800021a:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 800021c:	d319      	bcc.n	8000252 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 800021e:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000220:	1b12      	subs	r2, r2, r4

08000222 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000222:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 8000226:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800022a:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 800022c:	d1f9      	bne.n	8000222 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 800022e:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000230:	d005      	beq.n	800023e <_No2ChunkNeeded>

08000232 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000232:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000236:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800023a:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 800023c:	d1f9      	bne.n	8000232 <_LoopCopyAfterWrapAround>

0800023e <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 800023e:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000242:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000244:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000248:	4770      	bx	lr

0800024a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800024a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800024c:	3801      	subs	r0, #1
        CMP      R0,R2
 800024e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000250:	d2cd      	bcs.n	80001ee <_Case4>

08000252 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000252:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000254:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000256:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000258:	20000cb4 	.word	0x20000cb4

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b96e 	b.w	8000550 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468c      	mov	ip, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8083 	bne.w	80003a2 <__udivmoddi4+0x116>
 800029c:	428a      	cmp	r2, r1
 800029e:	4617      	mov	r7, r2
 80002a0:	d947      	bls.n	8000332 <__udivmoddi4+0xa6>
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	b142      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a8:	f1c2 0020 	rsb	r0, r2, #32
 80002ac:	fa24 f000 	lsr.w	r0, r4, r0
 80002b0:	4091      	lsls	r1, r2
 80002b2:	4097      	lsls	r7, r2
 80002b4:	ea40 0c01 	orr.w	ip, r0, r1
 80002b8:	4094      	lsls	r4, r2
 80002ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fbbc f6f8 	udiv	r6, ip, r8
 80002c4:	fa1f fe87 	uxth.w	lr, r7
 80002c8:	fb08 c116 	mls	r1, r8, r6, ip
 80002cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d0:	fb06 f10e 	mul.w	r1, r6, lr
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x60>
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	f106 30ff 	add.w	r0, r6, #4294967295
 80002de:	f080 8119 	bcs.w	8000514 <__udivmoddi4+0x288>
 80002e2:	4299      	cmp	r1, r3
 80002e4:	f240 8116 	bls.w	8000514 <__udivmoddi4+0x288>
 80002e8:	3e02      	subs	r6, #2
 80002ea:	443b      	add	r3, r7
 80002ec:	1a5b      	subs	r3, r3, r1
 80002ee:	b2a4      	uxth	r4, r4
 80002f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f4:	fb08 3310 	mls	r3, r8, r0, r3
 80002f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000300:	45a6      	cmp	lr, r4
 8000302:	d909      	bls.n	8000318 <__udivmoddi4+0x8c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	f080 8105 	bcs.w	8000518 <__udivmoddi4+0x28c>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f240 8102 	bls.w	8000518 <__udivmoddi4+0x28c>
 8000314:	3802      	subs	r0, #2
 8000316:	443c      	add	r4, r7
 8000318:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800031c:	eba4 040e 	sub.w	r4, r4, lr
 8000320:	2600      	movs	r6, #0
 8000322:	b11d      	cbz	r5, 800032c <__udivmoddi4+0xa0>
 8000324:	40d4      	lsrs	r4, r2
 8000326:	2300      	movs	r3, #0
 8000328:	e9c5 4300 	strd	r4, r3, [r5]
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xaa>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	2a00      	cmp	r2, #0
 800033c:	d150      	bne.n	80003e0 <__udivmoddi4+0x154>
 800033e:	1bcb      	subs	r3, r1, r7
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f f887 	uxth.w	r8, r7
 8000348:	2601      	movs	r6, #1
 800034a:	fbb3 fcfe 	udiv	ip, r3, lr
 800034e:	0c21      	lsrs	r1, r4, #16
 8000350:	fb0e 331c 	mls	r3, lr, ip, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb08 f30c 	mul.w	r3, r8, ip
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0xe4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0xe2>
 8000368:	428b      	cmp	r3, r1
 800036a:	f200 80e9 	bhi.w	8000540 <__udivmoddi4+0x2b4>
 800036e:	4684      	mov	ip, r0
 8000370:	1ac9      	subs	r1, r1, r3
 8000372:	b2a3      	uxth	r3, r4
 8000374:	fbb1 f0fe 	udiv	r0, r1, lr
 8000378:	fb0e 1110 	mls	r1, lr, r0, r1
 800037c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000380:	fb08 f800 	mul.w	r8, r8, r0
 8000384:	45a0      	cmp	r8, r4
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0x10c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x10a>
 8000390:	45a0      	cmp	r8, r4
 8000392:	f200 80d9 	bhi.w	8000548 <__udivmoddi4+0x2bc>
 8000396:	4618      	mov	r0, r3
 8000398:	eba4 0408 	sub.w	r4, r4, r8
 800039c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a0:	e7bf      	b.n	8000322 <__udivmoddi4+0x96>
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0x12e>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80b1 	beq.w	800050e <__udivmoddi4+0x282>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x1cc>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0x140>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80b8 	bhi.w	800053c <__udivmoddi4+0x2b0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0103 	sbc.w	r1, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	468c      	mov	ip, r1
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0a8      	beq.n	800032c <__udivmoddi4+0xa0>
 80003da:	e9c5 4c00 	strd	r4, ip, [r5]
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0xa0>
 80003e0:	f1c2 0320 	rsb	r3, r2, #32
 80003e4:	fa20 f603 	lsr.w	r6, r0, r3
 80003e8:	4097      	lsls	r7, r2
 80003ea:	fa01 f002 	lsl.w	r0, r1, r2
 80003ee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f2:	40d9      	lsrs	r1, r3
 80003f4:	4330      	orrs	r0, r6
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	fbb1 f6fe 	udiv	r6, r1, lr
 80003fc:	fa1f f887 	uxth.w	r8, r7
 8000400:	fb0e 1116 	mls	r1, lr, r6, r1
 8000404:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000408:	fb06 f108 	mul.w	r1, r6, r8
 800040c:	4299      	cmp	r1, r3
 800040e:	fa04 f402 	lsl.w	r4, r4, r2
 8000412:	d909      	bls.n	8000428 <__udivmoddi4+0x19c>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f106 3cff 	add.w	ip, r6, #4294967295
 800041a:	f080 808d 	bcs.w	8000538 <__udivmoddi4+0x2ac>
 800041e:	4299      	cmp	r1, r3
 8000420:	f240 808a 	bls.w	8000538 <__udivmoddi4+0x2ac>
 8000424:	3e02      	subs	r6, #2
 8000426:	443b      	add	r3, r7
 8000428:	1a5b      	subs	r3, r3, r1
 800042a:	b281      	uxth	r1, r0
 800042c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000430:	fb0e 3310 	mls	r3, lr, r0, r3
 8000434:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000438:	fb00 f308 	mul.w	r3, r0, r8
 800043c:	428b      	cmp	r3, r1
 800043e:	d907      	bls.n	8000450 <__udivmoddi4+0x1c4>
 8000440:	1879      	adds	r1, r7, r1
 8000442:	f100 3cff 	add.w	ip, r0, #4294967295
 8000446:	d273      	bcs.n	8000530 <__udivmoddi4+0x2a4>
 8000448:	428b      	cmp	r3, r1
 800044a:	d971      	bls.n	8000530 <__udivmoddi4+0x2a4>
 800044c:	3802      	subs	r0, #2
 800044e:	4439      	add	r1, r7
 8000450:	1acb      	subs	r3, r1, r3
 8000452:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000456:	e778      	b.n	800034a <__udivmoddi4+0xbe>
 8000458:	f1c6 0c20 	rsb	ip, r6, #32
 800045c:	fa03 f406 	lsl.w	r4, r3, r6
 8000460:	fa22 f30c 	lsr.w	r3, r2, ip
 8000464:	431c      	orrs	r4, r3
 8000466:	fa20 f70c 	lsr.w	r7, r0, ip
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000472:	fa21 f10c 	lsr.w	r1, r1, ip
 8000476:	431f      	orrs	r7, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fa1f f884 	uxth.w	r8, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800048a:	fb09 fa08 	mul.w	sl, r9, r8
 800048e:	458a      	cmp	sl, r1
 8000490:	fa02 f206 	lsl.w	r2, r2, r6
 8000494:	fa00 f306 	lsl.w	r3, r0, r6
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x220>
 800049a:	1861      	adds	r1, r4, r1
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d248      	bcs.n	8000534 <__udivmoddi4+0x2a8>
 80004a2:	458a      	cmp	sl, r1
 80004a4:	d946      	bls.n	8000534 <__udivmoddi4+0x2a8>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	4421      	add	r1, r4
 80004ac:	eba1 010a 	sub.w	r1, r1, sl
 80004b0:	b2bf      	uxth	r7, r7
 80004b2:	fbb1 f0fe 	udiv	r0, r1, lr
 80004b6:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45b8      	cmp	r8, r7
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x24a>
 80004c6:	19e7      	adds	r7, r4, r7
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d22e      	bcs.n	800052c <__udivmoddi4+0x2a0>
 80004ce:	45b8      	cmp	r8, r7
 80004d0:	d92c      	bls.n	800052c <__udivmoddi4+0x2a0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4427      	add	r7, r4
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba7 0708 	sub.w	r7, r7, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454f      	cmp	r7, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	4649      	mov	r1, r9
 80004e8:	d31a      	bcc.n	8000520 <__udivmoddi4+0x294>
 80004ea:	d017      	beq.n	800051c <__udivmoddi4+0x290>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x27a>
 80004ee:	ebb3 020e 	subs.w	r2, r3, lr
 80004f2:	eb67 0701 	sbc.w	r7, r7, r1
 80004f6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004fa:	40f2      	lsrs	r2, r6
 80004fc:	ea4c 0202 	orr.w	r2, ip, r2
 8000500:	40f7      	lsrs	r7, r6
 8000502:	e9c5 2700 	strd	r2, r7, [r5]
 8000506:	2600      	movs	r6, #0
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	462e      	mov	r6, r5
 8000510:	4628      	mov	r0, r5
 8000512:	e70b      	b.n	800032c <__udivmoddi4+0xa0>
 8000514:	4606      	mov	r6, r0
 8000516:	e6e9      	b.n	80002ec <__udivmoddi4+0x60>
 8000518:	4618      	mov	r0, r3
 800051a:	e6fd      	b.n	8000318 <__udivmoddi4+0x8c>
 800051c:	4543      	cmp	r3, r8
 800051e:	d2e5      	bcs.n	80004ec <__udivmoddi4+0x260>
 8000520:	ebb8 0e02 	subs.w	lr, r8, r2
 8000524:	eb69 0104 	sbc.w	r1, r9, r4
 8000528:	3801      	subs	r0, #1
 800052a:	e7df      	b.n	80004ec <__udivmoddi4+0x260>
 800052c:	4608      	mov	r0, r1
 800052e:	e7d2      	b.n	80004d6 <__udivmoddi4+0x24a>
 8000530:	4660      	mov	r0, ip
 8000532:	e78d      	b.n	8000450 <__udivmoddi4+0x1c4>
 8000534:	4681      	mov	r9, r0
 8000536:	e7b9      	b.n	80004ac <__udivmoddi4+0x220>
 8000538:	4666      	mov	r6, ip
 800053a:	e775      	b.n	8000428 <__udivmoddi4+0x19c>
 800053c:	4630      	mov	r0, r6
 800053e:	e74a      	b.n	80003d6 <__udivmoddi4+0x14a>
 8000540:	f1ac 0c02 	sub.w	ip, ip, #2
 8000544:	4439      	add	r1, r7
 8000546:	e713      	b.n	8000370 <__udivmoddi4+0xe4>
 8000548:	3802      	subs	r0, #2
 800054a:	443c      	add	r4, r7
 800054c:	e724      	b.n	8000398 <__udivmoddi4+0x10c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	; 0x30
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	4b65      	ldr	r3, [pc, #404]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a64      	ldr	r2, [pc, #400]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b62      	ldr	r3, [pc, #392]	; (8000704 <MX_GPIO_Init+0x1b0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	4b5e      	ldr	r3, [pc, #376]	; (8000704 <MX_GPIO_Init+0x1b0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a5d      	ldr	r2, [pc, #372]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b5b      	ldr	r3, [pc, #364]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b57      	ldr	r3, [pc, #348]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a56      	ldr	r2, [pc, #344]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b54      	ldr	r3, [pc, #336]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b50      	ldr	r3, [pc, #320]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a4f      	ldr	r2, [pc, #316]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b4d      	ldr	r3, [pc, #308]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0310 	and.w	r3, r3, #16
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b49      	ldr	r3, [pc, #292]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a48      	ldr	r2, [pc, #288]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b42      	ldr	r3, [pc, #264]	; (8000704 <MX_GPIO_Init+0x1b0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a41      	ldr	r2, [pc, #260]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <MX_GPIO_Init+0x1b0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_EN1_Pin|SPI1_EN2_Pin|UART1_EN_Pin|SPI3_EN1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f648 0150 	movw	r1, #34896	; 0x8850
 8000618:	483b      	ldr	r0, [pc, #236]	; (8000708 <MX_GPIO_Init+0x1b4>)
 800061a:	f001 fc5b 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_LD1_Pin|SPI1_LD2_Pin|SPI3_EN2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8000624:	4839      	ldr	r0, [pc, #228]	; (800070c <MX_GPIO_Init+0x1b8>)
 8000626:	f001 fc55 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USART3_EN2_Pin|USART3_EN1_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000630:	4837      	ldr	r0, [pc, #220]	; (8000710 <MX_GPIO_Init+0x1bc>)
 8000632:	f001 fc4f 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_EN1_Pin|SPI2_EN2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800063c:	4835      	ldr	r0, [pc, #212]	; (8000714 <MX_GPIO_Init+0x1c0>)
 800063e:	f001 fc49 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_LD1_Pin|SPI2_LD2_Pin|SS_LD2_Pin|SM_LD2_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f240 310d 	movw	r1, #781	; 0x30d
 8000648:	4833      	ldr	r0, [pc, #204]	; (8000718 <MX_GPIO_Init+0x1c4>)
 800064a:	f001 fc43 	bl	8001ed4 <HAL_GPIO_WritePin>
                          |SM_LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_EN1_Pin|SPI1_EN2_Pin|UART1_EN_Pin|SPI3_EN1_Pin;
 800064e:	f648 0350 	movw	r3, #34896	; 0x8850
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4828      	ldr	r0, [pc, #160]	; (8000708 <MX_GPIO_Init+0x1b4>)
 8000668:	f001 fa98 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_LD1_Pin|SPI1_LD2_Pin|SPI3_EN2_Pin;
 800066c:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4821      	ldr	r0, [pc, #132]	; (800070c <MX_GPIO_Init+0x1b8>)
 8000686:	f001 fa89 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USART3_EN2_Pin|USART3_EN1_Pin;
 800068a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	481b      	ldr	r0, [pc, #108]	; (8000710 <MX_GPIO_Init+0x1bc>)
 80006a4:	f001 fa7a 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_EN1_Pin|SPI2_EN2_Pin;
 80006a8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80006c2:	f001 fa6b 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = SPI2_LD1_Pin|SPI2_LD2_Pin|SS_LD2_Pin|SM_LD2_Pin
 80006c6:	f240 330d 	movw	r3, #781	; 0x30d
 80006ca:	61fb      	str	r3, [r7, #28]
                          |SM_LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_GPIO_Init+0x1c4>)
 80006e0:	f001 fa5c 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SS_LD1_Pin;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SS_LD1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <MX_GPIO_Init+0x1c4>)
 80006f8:	f001 fa50 	bl	8001b9c <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	40020800 	.word	0x40020800
 8000710:	40021000 	.word	0x40021000
 8000714:	40020400 	.word	0x40020400
 8000718:	40020c00 	.word	0x40020c00

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08d      	sub	sp, #52	; 0x34
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f001 f801 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f877 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f7ff ff13 	bl	8000554 <MX_GPIO_Init>
  MX_SPI1_Init();
 800072e:	f000 f8e3 	bl	80008f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000732:	f000 f919 	bl	8000968 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000736:	f000 f94f 	bl	80009d8 <MX_SPI3_Init>
  MX_TIM2_Init();
 800073a:	f000 fbf3 	bl	8000f24 <MX_TIM2_Init>
  MX_TIM3_Init();
 800073e:	f000 fc57 	bl	8000ff0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000742:	f000 fcbd 	bl	80010c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000746:	f000 fe83 	bl	8001450 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800074a:	f000 feab 	bl	80014a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800074e:	f000 fed3 	bl	80014f8 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 8000752:	f000 fd1d 	bl	8001190 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000756:	f000 fd3f 	bl	80011d8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 800075a:	f004 fe8d 	bl	8005478 <SEGGER_SYSVIEW_Conf>


  uint8_t data[] = {0,1,2,3,4,5,6,7,8,9,10,11,12};
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <main+0xe4>)
 8000760:	f107 0418 	add.w	r4, r7, #24
 8000764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000766:	c407      	stmia	r4!, {r0, r1, r2}
 8000768:	7023      	strb	r3, [r4, #0]

  uint8_t txData[10];
  uint8_t rxData[10];
  txData[0] = 0b00011100;
 800076a:	231c      	movs	r3, #28
 800076c:	733b      	strb	r3, [r7, #12]
  uint32_t abc = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_WritePin(SPI1_EN2_GPIO_Port, SPI1_EN2_Pin, GPIO_PIN_SET);	// set clk  rr485 to tx
 8000772:	2201      	movs	r2, #1
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4823      	ldr	r0, [pc, #140]	; (8000804 <main+0xe8>)
 8000778:	f001 fbac 	bl	8001ed4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_EN2_GPIO_Port, SPI2_EN2_Pin, GPIO_PIN_SET);	// set clk  rr485 to tx
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	4821      	ldr	r0, [pc, #132]	; (8000808 <main+0xec>)
 8000784:	f001 fba6 	bl	8001ed4 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim14);
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <main+0xf0>)
 800078a:	f002 f971 	bl	8002a70 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 800078e:	4820      	ldr	r0, [pc, #128]	; (8000810 <main+0xf4>)
 8000790:	f002 f906 	bl	80029a0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000794:	2100      	movs	r1, #0
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <main+0xf4>)
 8000798:	f002 fa2a 	bl	8002bf0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 800079c:	2104      	movs	r1, #4
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <main+0xf4>)
 80007a0:	f002 fa26 	bl	8002bf0 <HAL_TIM_OC_Start_IT>

  HAL_TIM_Base_Start(&htim4);
 80007a4:	481b      	ldr	r0, [pc, #108]	; (8000814 <main+0xf8>)
 80007a6:	f002 f8fb 	bl	80029a0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80007aa:	2100      	movs	r1, #0
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <main+0xf8>)
 80007ae:	f002 fa1f 	bl	8002bf0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 80007b2:	2104      	movs	r1, #4
 80007b4:	4817      	ldr	r0, [pc, #92]	; (8000814 <main+0xf8>)
 80007b6:	f002 fa1b 	bl	8002bf0 <HAL_TIM_OC_Start_IT>

uint16_t i = 100;
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
while(1){

//	__HAL_TIM_SET_PRESCALER(&htim4, i++);
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, i / 4);
 80007be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <main+0xf8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, (3 * i / 4) );
 80007ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da00      	bge.n	80007d8 <main+0xbc>
 80007d6:	3303      	adds	r3, #3
 80007d8:	109b      	asrs	r3, r3, #2
 80007da:	461a      	mov	r2, r3
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <main+0xf8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_AUTORELOAD(&htim4, i );
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <main+0xf8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <main+0xf8>)
 80007ee:	60d3      	str	r3, [r2, #12]

	i= i + 100;
 80007f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007f2:	3364      	adds	r3, #100	; 0x64
 80007f4:	85fb      	strh	r3, [r7, #46]	; 0x2e



	HAL_Delay(2);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f001 f808 	bl	800180c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, i / 4);
 80007fc:	e7df      	b.n	80007be <main+0xa2>
 80007fe:	bf00      	nop
 8000800:	08005554 	.word	0x08005554
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400
 800080c:	20000b9c 	.word	0x20000b9c
 8000810:	20000ac4 	.word	0x20000ac4
 8000814:	20000a7c 	.word	0x20000a7c

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fe80 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <SystemClock_Config+0xcc>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <SystemClock_Config+0xd0>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800088c:	23a8      	movs	r3, #168	; 0xa8
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fb33 	bl	8001f08 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a8:	f000 f820 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fd94 	bl	80023f8 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d6:	f000 f809 	bl	80008ec <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_SPI1_Init+0x68>)
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <MX_SPI1_Init+0x6c>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_SPI1_Init+0x68>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_SPI1_Init+0x68>)
 800090c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000910:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_SPI1_Init+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_SPI1_Init+0x68>)
 800091a:	2202      	movs	r2, #2
 800091c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_SPI1_Init+0x68>)
 8000920:	2201      	movs	r2, #1
 8000922:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_SPI1_Init+0x68>)
 8000926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_SPI1_Init+0x68>)
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_SPI1_Init+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_SPI1_Init+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_SPI1_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_SPI1_Init+0x68>)
 8000946:	220a      	movs	r2, #10
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_SPI1_Init+0x68>)
 800094c:	f001 ff50 	bl	80027f0 <HAL_SPI_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000956:	f7ff ffc9 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000a0c 	.word	0x20000a0c
 8000964:	40013000 	.word	0x40013000

08000968 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_SPI2_Init+0x68>)
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <MX_SPI2_Init+0x6c>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000978:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_SPI2_Init+0x68>)
 800097c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000980:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI2_Init+0x68>)
 800098a:	2202      	movs	r2, #2
 800098c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000990:	2201      	movs	r2, #1
 8000992:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI2_Init+0x68>)
 8000996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI2_Init+0x68>)
 800099e:	2230      	movs	r2, #48	; 0x30
 80009a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009b6:	220a      	movs	r2, #10
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_SPI2_Init+0x68>)
 80009bc:	f001 ff18 	bl	80027f0 <HAL_SPI_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80009c6:	f7ff ff91 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000095c 	.word	0x2000095c
 80009d4:	40003800 	.word	0x40003800

080009d8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_SPI3_Init+0x68>)
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <MX_SPI3_Init+0x6c>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_SPI3_Init+0x68>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_SPI3_Init+0x68>)
 80009ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_SPI3_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_SPI3_Init+0x68>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a26:	220a      	movs	r2, #10
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_SPI3_Init+0x68>)
 8000a2c:	f001 fee0 	bl	80027f0 <HAL_SPI_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000a36:	f7ff ff59 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200009b4 	.word	0x200009b4
 8000a44:	40003c00 	.word	0x40003c00

08000a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <HAL_SPI_MspInit+0x170>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d134      	bne.n	8000ad4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a52      	ldr	r2, [pc, #328]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a4b      	ldr	r2, [pc, #300]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <HAL_SPI_MspInit+0x178>)
 8000abe:	f001 f86d 	bl	8001b9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	2023      	movs	r0, #35	; 0x23
 8000ac8:	f000 ff9f 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000acc:	2023      	movs	r0, #35	; 0x23
 8000ace:	f000 ffb8 	bl	8001a42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ad2:	e06c      	b.n	8000bae <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a3a      	ldr	r2, [pc, #232]	; (8000bc4 <HAL_SPI_MspInit+0x17c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d135      	bne.n	8000b4a <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a35      	ldr	r2, [pc, #212]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b16:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b28:	2305      	movs	r3, #5
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <HAL_SPI_MspInit+0x180>)
 8000b34:	f001 f832 	bl	8001b9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	2024      	movs	r0, #36	; 0x24
 8000b3e:	f000 ff64 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000b42:	2024      	movs	r0, #36	; 0x24
 8000b44:	f000 ff7d 	bl	8001a42 <HAL_NVIC_EnableIRQ>
}
 8000b48:	e031      	b.n	8000bae <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_SPI_MspInit+0x184>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d12c      	bne.n	8000bae <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_SPI_MspInit+0x174>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_SPI_MspInit+0x188>)
 8000baa:	f000 fff7 	bl	8001b9c <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40003800 	.word	0x40003800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40003c00 	.word	0x40003c00
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 fdac 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8000c7c:	f004 fab4 	bl	80051e8 <SEGGER_SYSVIEW_RecordEnterISR>

  /* USER CODE END SPI1_IRQn 0 */
//  HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */
	    rxData[rxCount++] = SPI1->DR;				// receive
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SPI1_IRQHandler+0x3c>)
 8000c82:	68d9      	ldr	r1, [r3, #12]
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <SPI1_IRQHandler+0x40>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	b2d0      	uxtb	r0, r2
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SPI1_IRQHandler+0x40>)
 8000c8e:	7010      	strb	r0, [r2, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	b2c9      	uxtb	r1, r1
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <SPI1_IRQHandler+0x44>)
 8000c96:	5499      	strb	r1, [r3, r2]

	    if(rxCount==4){
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SPI1_IRQHandler+0x40>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d105      	bne.n	8000cac <SPI1_IRQHandler+0x34>
	  	  SPI1->CR1 &= ~SPI_CR1_SPE; //disable spi
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SPI1_IRQHandler+0x3c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <SPI1_IRQHandler+0x3c>)
 8000ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000caa:	6013      	str	r3, [r2, #0]
	    }

	    SEGGER_SYSVIEW_RecordExitISR();
 8000cac:	f004 fade 	bl	800526c <SEGGER_SYSVIEW_RecordExitISR>

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40013000 	.word	0x40013000
 8000cb8:	2000002c 	.word	0x2000002c
 8000cbc:	20000a64 	.word	0x20000a64

08000cc0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8000cc4:	f004 fa90 	bl	80051e8 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END SPI2_IRQn 0 */
//  HAL_SPI_IRQHandler(&hspi2);
  /* USER CODE BEGIN SPI2_IRQn 1 */
  rxData2[rxCount2++] = SPI2->DR;				// receive
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <SPI2_IRQHandler+0x3c>)
 8000cca:	68d9      	ldr	r1, [r3, #12]
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <SPI2_IRQHandler+0x40>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	b2d0      	uxtb	r0, r2
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SPI2_IRQHandler+0x40>)
 8000cd6:	7010      	strb	r0, [r2, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	b2c9      	uxtb	r1, r1
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <SPI2_IRQHandler+0x44>)
 8000cde:	5499      	strb	r1, [r3, r2]

  if(rxCount2==4){
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <SPI2_IRQHandler+0x40>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d105      	bne.n	8000cf4 <SPI2_IRQHandler+0x34>
	  SPI2->CR1 &= ~SPI_CR1_SPE; //disable spi
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SPI2_IRQHandler+0x3c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <SPI2_IRQHandler+0x3c>)
 8000cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cf2:	6013      	str	r3, [r2, #0]
  }

  SEGGER_SYSVIEW_RecordExitISR();
 8000cf4:	f004 faba 	bl	800526c <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END SPI2_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40003800 	.word	0x40003800
 8000d00:	2000002d 	.word	0x2000002d
 8000d04:	20000a70 	.word	0x20000a70

08000d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART1_IRQHandler+0x10>)
 8000d0e:	f002 fd6f 	bl	80037f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000c28 	.word	0x20000c28

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f002 fd65 	bl	80037f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000be4 	.word	0x20000be4

08000d30 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000d36:	f002 f871 	bl	8002e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000b0c 	.word	0x20000b0c

08000d44 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8000d48:	f004 fa4e 	bl	80051e8 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 8000d4e:	f002 f865 	bl	8002e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */



  spiCount = spiCount ^ 0x1;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	f083 0301 	eor.w	r3, r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 8000d5e:	701a      	strb	r2, [r3, #0]
  if(spiCount)
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <TIM8_TRG_COM_TIM14_IRQHandler+0x2a>
	  startSPI1();
 8000d68:	f000 f80c 	bl	8000d84 <startSPI1>
 8000d6c:	e001      	b.n	8000d72 <TIM8_TRG_COM_TIM14_IRQHandler+0x2e>
  else
	  startSPI2();
 8000d6e:	f000 f867 	bl	8000e40 <startSPI2>



  SEGGER_SYSVIEW_RecordExitISR();
 8000d72:	f004 fa7b 	bl	800526c <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000b9c 	.word	0x20000b9c
 8000d80:	2000002e 	.word	0x2000002e

08000d84 <startSPI1>:





void startSPI1(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

	SPI1->CR1 &= ~SPI_CR1_SPE;//disable spi
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <startSPI1+0xac>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <startSPI1+0xac>)
 8000d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d92:	6013      	str	r3, [r2, #0]
	SPI1->CR1 = SPI_CR1_LSBFIRST | SPI_CR1_MSTR | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE | SPI_BAUDRATEPRESCALER_64;
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <startSPI1+0xac>)
 8000d96:	f248 32af 	movw	r2, #33711	; 0x83af
 8000d9a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI1_EN1_GPIO_Port, SPI1_EN1_Pin, GPIO_PIN_SET);	// set data rs485 to tx
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <startSPI1+0xb0>)
 8000da2:	f001 f897 	bl	8001ed4 <HAL_GPIO_WritePin>



	SPI1->CR1 |= SPI_CR1_BIDIOE;//enable output
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <startSPI1+0xac>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <startSPI1+0xac>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;//enable spi
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <startSPI1+0xac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <startSPI1+0xac>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6013      	str	r3, [r2, #0]

	SPI1->DR = txData[0];
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <startSPI1+0xb4>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <startSPI1+0xac>)
 8000dc4:	60da      	str	r2, [r3, #12]
	while(!(SPI1->SR & SPI_SR_TXE));
 8000dc6:	bf00      	nop
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <startSPI1+0xac>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f9      	beq.n	8000dc8 <startSPI1+0x44>
	while(SPI1->SR & SPI_SR_BSY);
 8000dd4:	bf00      	nop
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <startSPI1+0xac>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f9      	bne.n	8000dd6 <startSPI1+0x52>

	SPI1->CR1 &= ~SPI_CR1_BIDIOE;//disable output, this activates the clock
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <startSPI1+0xac>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <startSPI1+0xac>)
 8000de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dec:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(SPI1_EN1_GPIO_Port, SPI1_EN1_Pin, GPIO_PIN_RESET);	// set data rs485 to rx
 8000dee:	2200      	movs	r2, #0
 8000df0:	2110      	movs	r1, #16
 8000df2:	4810      	ldr	r0, [pc, #64]	; (8000e34 <startSPI1+0xb0>)
 8000df4:	f001 f86e 	bl	8001ed4 <HAL_GPIO_WritePin>


	SPI1->CR1 &= ~SPI_CR1_SPE;//disable spi
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <startSPI1+0xac>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <startSPI1+0xac>)
 8000dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e02:	6013      	str	r3, [r2, #0]
	SPI1->CR1 = SPI_CR1_LSBFIRST | SPI_CR1_MSTR | SPI_CR1_CPOL | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE | SPI_BAUDRATEPRESCALER_64;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <startSPI1+0xac>)
 8000e06:	f248 32ae 	movw	r2, #33710	; 0x83ae
 8000e0a:	601a      	str	r2, [r3, #0]
	rxCount = 0;
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <startSPI1+0xb8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_RXNEIE;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <startSPI1+0xac>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <startSPI1+0xac>)
 8000e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1c:	6053      	str	r3, [r2, #4]

	SPI1->CR1 |= SPI_CR1_SPE;//enable spi
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <startSPI1+0xac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <startSPI1+0xac>)
 8000e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40020000 	.word	0x40020000
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	2000002c 	.word	0x2000002c

08000e40 <startSPI2>:



void startSPI2(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

	SPI2->CR1 &= ~SPI_CR1_SPE;//disable spi
 8000e44:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <startSPI2+0xb0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a29      	ldr	r2, [pc, #164]	; (8000ef0 <startSPI2+0xb0>)
 8000e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e4e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 = SPI_CR1_LSBFIRST | SPI_CR1_MSTR | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE | SPI_BAUDRATEPRESCALER_32;
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <startSPI2+0xb0>)
 8000e52:	f248 32a7 	movw	r2, #33703	; 0x83a7
 8000e56:	601a      	str	r2, [r3, #0]


	HAL_GPIO_WritePin(SPI2_EN1_GPIO_Port, SPI2_EN1_Pin, GPIO_PIN_SET);	// set data rs485 to tx
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5e:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <startSPI2+0xb4>)
 8000e60:	f001 f838 	bl	8001ed4 <HAL_GPIO_WritePin>



	SPI2->CR1 |= SPI_CR1_BIDIOE;//enable output
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <startSPI2+0xb0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <startSPI2+0xb0>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SPE;//enable spi
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <startSPI2+0xb0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <startSPI2+0xb0>)
 8000e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7a:	6013      	str	r3, [r2, #0]

	SPI2->DR = txData[0];
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <startSPI2+0xb8>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <startSPI2+0xb0>)
 8000e82:	60da      	str	r2, [r3, #12]
	while(!(SPI2->SR & SPI_SR_TXE));
 8000e84:	bf00      	nop
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <startSPI2+0xb0>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <startSPI2+0x46>
	while(SPI2->SR & SPI_SR_BSY);
 8000e92:	bf00      	nop
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <startSPI2+0xb0>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f9      	bne.n	8000e94 <startSPI2+0x54>

	SPI2->CR1 &= ~SPI_CR1_BIDIOE;//disable output, this activates the clock
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <startSPI2+0xb0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <startSPI2+0xb0>)
 8000ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eaa:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(SPI2_EN1_GPIO_Port, SPI2_EN1_Pin, GPIO_PIN_RESET);	// set data rs485 to tx
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb2:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <startSPI2+0xb4>)
 8000eb4:	f001 f80e 	bl	8001ed4 <HAL_GPIO_WritePin>


	SPI2->CR1 &= ~SPI_CR1_SPE;//disable spi
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <startSPI2+0xb0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <startSPI2+0xb0>)
 8000ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 = SPI_CR1_LSBFIRST | SPI_CR1_MSTR | SPI_CR1_CPOL | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE | SPI_BAUDRATEPRESCALER_32;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <startSPI2+0xb0>)
 8000ec6:	f248 32a6 	movw	r2, #33702	; 0x83a6
 8000eca:	601a      	str	r2, [r3, #0]
	rxCount2 = 0;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <startSPI2+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	SPI2->CR2 |= SPI_CR2_RXNEIE;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <startSPI2+0xb0>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <startSPI2+0xb0>)
 8000ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000edc:	6053      	str	r3, [r2, #4]

	SPI2->CR1 |= SPI_CR1_SPE;//enable spi
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <startSPI2+0xb0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <startSPI2+0xb0>)
 8000ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee8:	6013      	str	r3, [r2, #0]
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40003800 	.word	0x40003800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	2000002d 	.word	0x2000002d

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f5c:	2264      	movs	r2, #100	; 0x64
 8000f5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f6c:	481f      	ldr	r0, [pc, #124]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f6e:	f001 fdef 	bl	8002b50 <HAL_TIM_OC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f78:	f7ff fcb8 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4818      	ldr	r0, [pc, #96]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000f8c:	f002 fb52 	bl	8003634 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000f96:	f7ff fca9 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f9a:	2330      	movs	r3, #48	; 0x30
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8000f9e:	2319      	movs	r3, #25
 8000fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000fb2:	f002 f83b 	bl	800302c <HAL_TIM_OC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fbc:	f7ff fc96 	bl	80008ec <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000fc0:	2332      	movs	r3, #50	; 0x32
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000fd0:	f002 f82c 	bl	800302c <HAL_TIM_OC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000fda:	f7ff fc87 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM2_Init+0xc8>)
 8000fe0:	f000 f9ae 	bl	8001340 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000b54 	.word	0x20000b54

08000ff0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_TIM3_Init+0xc8>)
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <MX_TIM3_Init+0xcc>)
 8001016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_TIM3_Init+0xc8>)
 800101a:	f240 3247 	movw	r2, #839	; 0x347
 800101e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <MX_TIM3_Init+0xc8>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_TIM3_Init+0xc8>)
 8001028:	2264      	movs	r2, #100	; 0x64
 800102a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_TIM3_Init+0xc8>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_TIM3_Init+0xc8>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001038:	481f      	ldr	r0, [pc, #124]	; (80010b8 <MX_TIM3_Init+0xc8>)
 800103a:	f001 fd89 	bl	8002b50 <HAL_TIM_OC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001044:	f7ff fc52 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4619      	mov	r1, r3
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <MX_TIM3_Init+0xc8>)
 8001058:	f002 faec 	bl	8003634 <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001062:	f7ff fc43 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001066:	2330      	movs	r3, #48	; 0x30
 8001068:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 800106a:	2319      	movs	r3, #25
 800106c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800106e:	2302      	movs	r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <MX_TIM3_Init+0xc8>)
 800107e:	f001 ffd5 	bl	800302c <HAL_TIM_OC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001088:	f7ff fc30 	bl	80008ec <Error_Handler>
  }
  sConfigOC.Pulse = 75;
 800108c:	234b      	movs	r3, #75	; 0x4b
 800108e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2204      	movs	r2, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <MX_TIM3_Init+0xc8>)
 800109c:	f001 ffc6 	bl	800302c <HAL_TIM_OC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80010a6:	f7ff fc21 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_TIM3_Init+0xc8>)
 80010ac:	f000 f948 	bl	8001340 <HAL_TIM_MspPostInit>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000ac4 	.word	0x20000ac4
 80010bc:	40000400 	.word	0x40000400

080010c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010e2:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_TIM4_Init+0xc8>)
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <MX_TIM4_Init+0xcc>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_TIM4_Init+0xc8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_TIM4_Init+0xc8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_TIM4_Init+0xc8>)
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <MX_TIM4_Init+0xc8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_TIM4_Init+0xc8>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <MX_TIM4_Init+0xc8>)
 8001108:	f001 fd22 	bl	8002b50 <HAL_TIM_OC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001112:	f7ff fbeb 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4619      	mov	r1, r3
 8001124:	4818      	ldr	r0, [pc, #96]	; (8001188 <MX_TIM4_Init+0xc8>)
 8001126:	f002 fa85 	bl	8003634 <HAL_TIMEx_MasterConfigSynchronization>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001130:	f7ff fbdc 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001134:	2330      	movs	r3, #48	; 0x30
 8001136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8001138:	2319      	movs	r3, #25
 800113a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <MX_TIM4_Init+0xc8>)
 800114c:	f001 ff6e 	bl	800302c <HAL_TIM_OC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001156:	f7ff fbc9 	bl	80008ec <Error_Handler>
  }
  sConfigOC.Pulse = 75;
 800115a:	234b      	movs	r3, #75	; 0x4b
 800115c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM4_Init+0xc8>)
 800116a:	f001 ff5f 	bl	800302c <HAL_TIM_OC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001174:	f7ff fbba 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM4_Init+0xc8>)
 800117a:	f000 f8e1 	bl	8001340 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000a7c 	.word	0x20000a7c
 800118c:	40000800 	.word	0x40000800

08001190 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_TIM13_Init+0x40>)
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <MX_TIM13_Init+0x44>)
 8001198:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_TIM13_Init+0x40>)
 800119c:	2254      	movs	r2, #84	; 0x54
 800119e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_TIM13_Init+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_TIM13_Init+0x40>)
 80011a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_TIM13_Init+0x40>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_TIM13_Init+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_TIM13_Init+0x40>)
 80011bc:	f001 fba1 	bl	8002902 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80011c6:	f7ff fb91 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000b0c 	.word	0x20000b0c
 80011d4:	40001c00 	.word	0x40001c00

080011d8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_TIM14_Init+0x3c>)
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <MX_TIM14_Init+0x40>)
 80011e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_TIM14_Init+0x3c>)
 80011e4:	2254      	movs	r2, #84	; 0x54
 80011e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_TIM14_Init+0x3c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_TIM14_Init+0x3c>)
 80011f0:	2264      	movs	r2, #100	; 0x64
 80011f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_TIM14_Init+0x3c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_TIM14_Init+0x3c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_TIM14_Init+0x3c>)
 8001202:	f001 fb7e 	bl	8002902 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800120c:	f7ff fb6e 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000b9c 	.word	0x20000b9c
 8001218:	40002000 	.word	0x40002000

0800121c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d10e      	bne.n	800124c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800124a:	e026      	b.n	800129a <HAL_TIM_OC_MspInit+0x7e>
  else if(tim_ocHandle->Instance==TIM3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_TIM_OC_MspInit+0x90>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10e      	bne.n	8001274 <HAL_TIM_OC_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
}
 8001272:	e012      	b.n	800129a <HAL_TIM_OC_MspInit+0x7e>
  else if(tim_ocHandle->Instance==TIM4)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_TIM_OC_MspInit+0x94>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10d      	bne.n	800129a <HAL_TIM_OC_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_TIM_OC_MspInit+0x8c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40000800 	.word	0x40000800

080012b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_TIM_Base_MspInit+0x80>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d116      	bne.n	80012f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_TIM_Base_MspInit+0x84>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_TIM_Base_MspInit+0x84>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_TIM_Base_MspInit+0x84>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	202c      	movs	r0, #44	; 0x2c
 80012e8:	f000 fb8f 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80012ec:	202c      	movs	r0, #44	; 0x2c
 80012ee:	f000 fba8 	bl	8001a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80012f2:	e01a      	b.n	800132a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM14)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_TIM_Base_MspInit+0x88>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d115      	bne.n	800132a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_TIM_Base_MspInit+0x84>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <HAL_TIM_Base_MspInit+0x84>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_TIM_Base_MspInit+0x84>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 6, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2106      	movs	r1, #6
 800131e:	202d      	movs	r0, #45	; 0x2d
 8001320:	f000 fb73 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001324:	202d      	movs	r0, #45	; 0x2d
 8001326:	f000 fb8c 	bl	8001a42 <HAL_NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40001c00 	.word	0x40001c00
 8001338:	40023800 	.word	0x40023800
 800133c:	40002000 	.word	0x40002000

08001340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001360:	d11e      	bne.n	80013a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800137e:	2303      	movs	r3, #3
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138e:	2301      	movs	r3, #1
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4828      	ldr	r0, [pc, #160]	; (800143c <HAL_TIM_MspPostInit+0xfc>)
 800139a:	f000 fbff 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800139e:	e047      	b.n	8001430 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_TIM_MspPostInit+0x100>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d11e      	bne.n	80013e8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013c6:	2330      	movs	r3, #48	; 0x30
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d6:	2302      	movs	r3, #2
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_TIM_MspPostInit+0x104>)
 80013e2:	f000 fbdb 	bl	8001b9c <HAL_GPIO_Init>
}
 80013e6:	e023      	b.n	8001430 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <HAL_TIM_MspPostInit+0x108>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11e      	bne.n	8001430 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_TIM_MspPostInit+0xf8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800140e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <HAL_TIM_MspPostInit+0x10c>)
 800142c:	f000 fbb6 	bl	8001b9c <HAL_GPIO_Init>
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40000400 	.word	0x40000400
 8001444:	40020400 	.word	0x40020400
 8001448:	40000800 	.word	0x40000800
 800144c:	40020c00 	.word	0x40020c00

08001450 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_USART1_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_USART1_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART1_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART1_UART_Init+0x4c>)
 8001488:	f002 f964 	bl	8003754 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f7ff fa2b 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000c28 	.word	0x20000c28
 80014a0:	40011000 	.word	0x40011000

080014a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_USART2_UART_Init+0x50>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014dc:	f002 f93a 	bl	8003754 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014e6:	f7ff fa01 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000c6c 	.word	0x20000c6c
 80014f4:	40004400 	.word	0x40004400

080014f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MX_USART3_UART_Init+0x50>)
 8001500:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART3_UART_Init+0x4c>)
 8001530:	f002 f910 	bl	8003754 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800153a:	f7ff f9d7 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000be4 	.word	0x20000be4
 8001548:	40004800 	.word	0x40004800

0800154c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	; 0x38
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_UART_MspInit+0x170>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d135      	bne.n	80015da <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	623b      	str	r3, [r7, #32]
 8001588:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_UART_MspInit+0x174>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b8:	2307      	movs	r3, #7
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4840      	ldr	r0, [pc, #256]	; (80016c4 <HAL_UART_MspInit+0x178>)
 80015c4:	f000 faea 	bl	8001b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	210a      	movs	r1, #10
 80015cc:	2025      	movs	r0, #37	; 0x25
 80015ce:	f000 fa1c 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015d2:	2025      	movs	r0, #37	; 0x25
 80015d4:	f000 fa35 	bl	8001a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015d8:	e06b      	b.n	80016b2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <HAL_UART_MspInit+0x17c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d12c      	bne.n	800163e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_UART_MspInit+0x174>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a34      	ldr	r2, [pc, #208]	; (80016c0 <HAL_UART_MspInit+0x174>)
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_UART_MspInit+0x174>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <HAL_UART_MspInit+0x174>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800161c:	230c      	movs	r3, #12
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162c:	2307      	movs	r3, #7
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	4823      	ldr	r0, [pc, #140]	; (80016c4 <HAL_UART_MspInit+0x178>)
 8001638:	f000 fab0 	bl	8001b9c <HAL_GPIO_Init>
}
 800163c:	e039      	b.n	80016b2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_UART_MspInit+0x180>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d134      	bne.n	80016b2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_UART_MspInit+0x174>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x174>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x174>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0x174>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_UART_MspInit+0x174>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001680:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001692:	2307      	movs	r3, #7
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <HAL_UART_MspInit+0x184>)
 800169e:	f000 fa7d 	bl	8001b9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	210a      	movs	r1, #10
 80016a6:	2027      	movs	r0, #39	; 0x27
 80016a8:	f000 f9af 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ac:	2027      	movs	r0, #39	; 0x27
 80016ae:	f000 f9c8 	bl	8001a42 <HAL_NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3738      	adds	r7, #56	; 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40004400 	.word	0x40004400
 80016cc:	40004800 	.word	0x40004800
 80016d0:	40020400 	.word	0x40020400

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016da:	490e      	ldr	r1, [pc, #56]	; (8001714 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f0:	4c0b      	ldr	r4, [pc, #44]	; (8001720 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fe:	f7ff fbff 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 fee1 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7ff f809 	bl	800071c <main>
  bx  lr    
 800170a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800170c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001718:	08005620 	.word	0x08005620
  ldr r2, =_sbss
 800171c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001720:	20000d5c 	.word	0x20000d5c

08001724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC_IRQHandler>
	...

08001728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_Init+0x40>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_Init+0x40>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x40>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f94f 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fa3a 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f967 	bl	8001a5e <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 f92f 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000004 	.word	0x20000004
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000008 	.word	0x20000008

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000000c 	.word	0x2000000c
 80017f0:	20000cb0 	.word	0x20000cb0

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000cb0 	.word	0x20000cb0

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_Delay+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000000c 	.word	0x2000000c

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff feb6 	bl	80017f4 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d008      	beq.n	8001aa8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e052      	b.n	8001b4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0216 	bic.w	r2, r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_DMA_Abort+0x62>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0208 	bic.w	r2, r2, #8
 8001ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af8:	e013      	b.n	8001b22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afa:	f7ff fe7b 	bl	80017f4 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d90c      	bls.n	8001b22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e015      	b.n	8001b4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e4      	bne.n	8001afa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	223f      	movs	r2, #63	; 0x3f
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d004      	beq.n	8001b74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e00c      	b.n	8001b8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2205      	movs	r2, #5
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e16b      	b.n	8001e90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 815a 	bne.w	8001e8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d005      	beq.n	8001bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80b4 	beq.w	8001e8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b60      	ldr	r3, [pc, #384]	; (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_GPIO_Init+0x310>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <HAL_GPIO_Init+0x314>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_GPIO_Init+0x318>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x222>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a50      	ldr	r2, [pc, #320]	; (8001eb8 <HAL_GPIO_Init+0x31c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x21e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4f      	ldr	r2, [pc, #316]	; (8001ebc <HAL_GPIO_Init+0x320>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x216>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_GPIO_Init+0x328>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x212>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4c      	ldr	r2, [pc, #304]	; (8001ec8 <HAL_GPIO_Init+0x32c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x20a>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00e      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001da6:	2308      	movs	r3, #8
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x310>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e06:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e30:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae90 	bls.w	8001bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40021c00 	.word	0x40021c00
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	619a      	str	r2, [r3, #24]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e264      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f26:	4ba3      	ldr	r3, [pc, #652]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d00c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4ba0      	ldr	r3, [pc, #640]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d112      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3e:	4b9d      	ldr	r3, [pc, #628]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b99      	ldr	r3, [pc, #612]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <HAL_RCC_OscConfig+0x108>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d157      	bne.n	8002010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e23f      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x74>
 8001f6e:	4b91      	ldr	r3, [pc, #580]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a90      	ldr	r2, [pc, #576]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a8a      	ldr	r2, [pc, #552]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a87      	ldr	r2, [pc, #540]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001fa0:	4b84      	ldr	r3, [pc, #528]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a83      	ldr	r2, [pc, #524]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b81      	ldr	r3, [pc, #516]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a80      	ldr	r2, [pc, #512]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc18 	bl	80017f4 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fc14 	bl	80017f4 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e204      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fc04 	bl	80017f4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fc00 	bl	80017f4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1f0      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1c4      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4952      	ldr	r1, [pc, #328]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCC_OscConfig+0x2b0>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff fbb9 	bl	80017f4 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff fbb5 	bl	80017f4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1a5      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4940      	ldr	r1, [pc, #256]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_OscConfig+0x2b0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fb98 	bl	80017f4 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fb94 	bl	80017f4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e184      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d030      	beq.n	8002154 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCC_OscConfig+0x2b4>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff fb78 	bl	80017f4 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff fb74 	bl	80017f4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e164      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x200>
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0x2b4>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff fb61 	bl	80017f4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002136:	f7ff fb5d 	bl	80017f4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e14d      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a0 	beq.w	80022a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x2b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d121      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_RCC_OscConfig+0x2b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_RCC_OscConfig+0x2b8>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fb23 	bl	80017f4 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e011      	b.n	80021d6 <HAL_RCC_OscConfig+0x2ce>
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	42470e80 	.word	0x42470e80
 80021c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7ff fb16 	bl	80017f4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e106      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b85      	ldr	r3, [pc, #532]	; (80023ec <HAL_RCC_OscConfig+0x4e4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
 80021ea:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a80      	ldr	r2, [pc, #512]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	e01c      	b.n	8002232 <HAL_RCC_OscConfig+0x32a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0x312>
 8002200:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0x32a>
 800221a:	4b75      	ldr	r3, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a74      	ldr	r2, [pc, #464]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	4a71      	ldr	r2, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7ff fadb 	bl	80017f4 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7ff fad7 	bl	80017f4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0c5      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ee      	beq.n	8002242 <HAL_RCC_OscConfig+0x33a>
 8002264:	e014      	b.n	8002290 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7ff fac5 	bl	80017f4 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff fac1 	bl	80017f4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	; 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0af      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ee      	bne.n	800226e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a55      	ldr	r2, [pc, #340]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 809b 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d05c      	beq.n	8002372 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d141      	bne.n	8002344 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x4ec>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fa95 	bl	80017f4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fa91 	bl	80017f4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e081      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	019b      	lsls	r3, r3, #6
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	3b01      	subs	r3, #1
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_OscConfig+0x4ec>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fa6a 	bl	80017f4 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff fa66 	bl	80017f4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e056      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x41c>
 8002342:	e04e      	b.n	80023e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x4ec>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff fa53 	bl	80017f4 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff fa4f 	bl	80017f4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e03f      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x44a>
 8002370:	e037      	b.n	80023e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e032      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d028      	beq.n	80023de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d121      	bne.n	80023de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d11a      	bne.n	80023de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023ae:	4013      	ands	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d111      	bne.n	80023de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	3b01      	subs	r3, #1
 80023c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d107      	bne.n	80023de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40007000 	.word	0x40007000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	42470060 	.word	0x42470060

080023f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0cc      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d90c      	bls.n	8002434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800246e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e067      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4934      	ldr	r1, [pc, #208]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7ff f984 	bl	80017f4 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7ff f980 	bl	80017f4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d20c      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490a      	ldr	r1, [pc, #40]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f8e4 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080055ec 	.word	0x080055ec
 80025bc:	20000004 	.word	0x20000004
 80025c0:	20000008 	.word	0x20000008

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025dc:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d00d      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x40>
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	f200 80bd 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x1a4>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x34>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x3a>
 80025f6:	e0b7      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025fa:	60bb      	str	r3, [r7, #8]
       break;
 80025fc:	e0b7      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002600:	60bb      	str	r3, [r7, #8]
      break;
 8002602:	e0b4      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002604:	4b5d      	ldr	r3, [pc, #372]	; (800277c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800260c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d04d      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261a:	4b58      	ldr	r3, [pc, #352]	; (800277c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	461a      	mov	r2, r3
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	f240 10ff 	movw	r0, #511	; 0x1ff
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	ea02 0800 	and.w	r8, r2, r0
 8002632:	ea03 0901 	and.w	r9, r3, r1
 8002636:	4640      	mov	r0, r8
 8002638:	4649      	mov	r1, r9
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	014b      	lsls	r3, r1, #5
 8002644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002648:	0142      	lsls	r2, r0, #5
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	ebb0 0008 	subs.w	r0, r0, r8
 8002652:	eb61 0109 	sbc.w	r1, r1, r9
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002664:	0182      	lsls	r2, r0, #6
 8002666:	1a12      	subs	r2, r2, r0
 8002668:	eb63 0301 	sbc.w	r3, r3, r1
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	00d9      	lsls	r1, r3, #3
 8002676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800267a:	00d0      	lsls	r0, r2, #3
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	eb12 0208 	adds.w	r2, r2, r8
 8002684:	eb43 0309 	adc.w	r3, r3, r9
 8002688:	f04f 0000 	mov.w	r0, #0
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	0259      	lsls	r1, r3, #9
 8002692:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002696:	0250      	lsls	r0, r2, #9
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	f7fd fdd8 	bl	800025c <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e04a      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	461a      	mov	r2, r3
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	ea02 0400 	and.w	r4, r2, r0
 80026ce:	ea03 0501 	and.w	r5, r3, r1
 80026d2:	4620      	mov	r0, r4
 80026d4:	4629      	mov	r1, r5
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	014b      	lsls	r3, r1, #5
 80026e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026e4:	0142      	lsls	r2, r0, #5
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	1b00      	subs	r0, r0, r4
 80026ec:	eb61 0105 	sbc.w	r1, r1, r5
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	018b      	lsls	r3, r1, #6
 80026fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026fe:	0182      	lsls	r2, r0, #6
 8002700:	1a12      	subs	r2, r2, r0
 8002702:	eb63 0301 	sbc.w	r3, r3, r1
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	00d9      	lsls	r1, r3, #3
 8002710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002714:	00d0      	lsls	r0, r2, #3
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	1912      	adds	r2, r2, r4
 800271c:	eb45 0303 	adc.w	r3, r5, r3
 8002720:	f04f 0000 	mov.w	r0, #0
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	0299      	lsls	r1, r3, #10
 800272a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800272e:	0290      	lsls	r0, r2, #10
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f7fd fd8c 	bl	800025c <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	60bb      	str	r3, [r7, #8]
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800276a:	60bb      	str	r3, [r7, #8]
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	68bb      	ldr	r3, [r7, #8]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	007a1200 	.word	0x007a1200

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	080055fc 	.word	0x080055fc

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	080055fc 	.word	0x080055fc

080027f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07b      	b.n	80028fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002812:	d009      	beq.n	8002828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
 800281a:	e005      	b.n	8002828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f900 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0104 	and.w	r1, r3, #4
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f003 0210 	and.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e041      	b.n	8002998 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fe fcc3 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 fc01 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d001      	beq.n	80029b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e046      	b.n	8002a46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <HAL_TIM_Base_Start+0xb4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d01d      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_TIM_Base_Start+0xb8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_TIM_Base_Start+0xbc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <HAL_TIM_Base_Start+0xc0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_TIM_Base_Start+0xc4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_TIM_Base_Start+0xc8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_TIM_Base_Start+0x70>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Base_Start+0xcc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d010      	beq.n	8002a44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a32:	e007      	b.n	8002a44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40000c00 	.word	0x40000c00
 8002a64:	40010400 	.word	0x40010400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40001800 	.word	0x40001800

08002a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04e      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a23      	ldr	r2, [pc, #140]	; (8002b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d01d      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d111      	bne.n	8002b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d010      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	e007      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40010400 	.word	0x40010400
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40001800 	.word	0x40001800

08002b50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e041      	b.n	8002be6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fb50 	bl	800121c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 fada 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_OC_Start_IT+0x28>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e022      	b.n	8002c5e <HAL_TIM_OC_Start_IT+0x6e>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d109      	bne.n	8002c32 <HAL_TIM_OC_Start_IT+0x42>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e015      	b.n	8002c5e <HAL_TIM_OC_Start_IT+0x6e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d109      	bne.n	8002c4c <HAL_TIM_OC_Start_IT+0x5c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e008      	b.n	8002c5e <HAL_TIM_OC_Start_IT+0x6e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0c7      	b.n	8002df6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_OC_Start_IT+0x86>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_OC_Start_IT+0xae>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_OC_Start_IT+0x96>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c84:	e00b      	b.n	8002c9e <HAL_TIM_OC_Start_IT+0xae>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_OC_Start_IT+0xa6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_OC_Start_IT+0xae>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d841      	bhi.n	8002d28 <HAL_TIM_OC_Start_IT+0x138>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <HAL_TIM_OC_Start_IT+0xbc>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002d29 	.word	0x08002d29
 8002cb4:	08002d29 	.word	0x08002d29
 8002cb8:	08002d29 	.word	0x08002d29
 8002cbc:	08002cf3 	.word	0x08002cf3
 8002cc0:	08002d29 	.word	0x08002d29
 8002cc4:	08002d29 	.word	0x08002d29
 8002cc8:	08002d29 	.word	0x08002d29
 8002ccc:	08002d05 	.word	0x08002d05
 8002cd0:	08002d29 	.word	0x08002d29
 8002cd4:	08002d29 	.word	0x08002d29
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002d17 	.word	0x08002d17
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0202 	orr.w	r2, r2, #2
 8002cee:	60da      	str	r2, [r3, #12]
      break;
 8002cf0:	e01d      	b.n	8002d2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0204 	orr.w	r2, r2, #4
 8002d00:	60da      	str	r2, [r3, #12]
      break;
 8002d02:	e014      	b.n	8002d2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	60da      	str	r2, [r3, #12]
      break;
 8002d14:	e00b      	b.n	8002d2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0210 	orr.w	r2, r2, #16
 8002d24:	60da      	str	r2, [r3, #12]
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d15f      	bne.n	8002df4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fc53 	bl	80035e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <HAL_TIM_OC_Start_IT+0x210>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIM_OC_Start_IT+0x166>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2c      	ldr	r2, [pc, #176]	; (8002e04 <HAL_TIM_OC_Start_IT+0x214>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_OC_Start_IT+0x16a>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_TIM_OC_Start_IT+0x16c>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_TIM_OC_Start_IT+0x210>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d022      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d82:	d01d      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_TIM_OC_Start_IT+0x218>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d018      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_TIM_OC_Start_IT+0x21c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_TIM_OC_Start_IT+0x220>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00e      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_TIM_OC_Start_IT+0x214>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <HAL_TIM_OC_Start_IT+0x224>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIM_OC_Start_IT+0x1d0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_TIM_OC_Start_IT+0x228>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d010      	beq.n	8002df4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	e007      	b.n	8002df4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40014000 	.word	0x40014000
 8002e18:	40001800 	.word	0x40001800

08002e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0202 	mvn.w	r2, #2
 8002e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f954 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f946 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f957 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0204 	mvn.w	r2, #4
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f92a 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f91c 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f92d 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d122      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d11b      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0208 	mvn.w	r2, #8
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f900 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8f2 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f903 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0210 	mvn.w	r2, #16
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8d6 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8c8 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8d9 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0201 	mvn.w	r2, #1
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8a2 	bl	80030e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fbba 	bl	8003740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f89e 	bl	8003134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0220 	mvn.w	r2, #32
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb84 	bl	800372c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003046:	2302      	movs	r3, #2
 8003048:	e048      	b.n	80030dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d839      	bhi.n	80030cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_TIM_OC_ConfigChannel+0x34>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003095 	.word	0x08003095
 8003064:	080030cd 	.word	0x080030cd
 8003068:	080030cd 	.word	0x080030cd
 800306c:	080030cd 	.word	0x080030cd
 8003070:	080030a3 	.word	0x080030a3
 8003074:	080030cd 	.word	0x080030cd
 8003078:	080030cd 	.word	0x080030cd
 800307c:	080030cd 	.word	0x080030cd
 8003080:	080030b1 	.word	0x080030b1
 8003084:	080030cd 	.word	0x080030cd
 8003088:	080030cd 	.word	0x080030cd
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030bf 	.word	0x080030bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f8f4 	bl	8003288 <TIM_OC1_SetConfig>
      break;
 80030a0:	e017      	b.n	80030d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f95d 	bl	8003368 <TIM_OC2_SetConfig>
      break;
 80030ae:	e010      	b.n	80030d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f9cc 	bl	8003454 <TIM_OC3_SetConfig>
      break;
 80030bc:	e009      	b.n	80030d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fa39 	bl	800353c <TIM_OC4_SetConfig>
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
      break;
 80030d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a40      	ldr	r2, [pc, #256]	; (800325c <TIM_Base_SetConfig+0x114>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003166:	d00f      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3d      	ldr	r2, [pc, #244]	; (8003260 <TIM_Base_SetConfig+0x118>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00b      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3c      	ldr	r2, [pc, #240]	; (8003264 <TIM_Base_SetConfig+0x11c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3b      	ldr	r2, [pc, #236]	; (8003268 <TIM_Base_SetConfig+0x120>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3a      	ldr	r2, [pc, #232]	; (800326c <TIM_Base_SetConfig+0x124>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2f      	ldr	r2, [pc, #188]	; (800325c <TIM_Base_SetConfig+0x114>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d027      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <TIM_Base_SetConfig+0x118>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d023      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <TIM_Base_SetConfig+0x11c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <TIM_Base_SetConfig+0x120>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a29      	ldr	r2, [pc, #164]	; (800326c <TIM_Base_SetConfig+0x124>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <TIM_Base_SetConfig+0x128>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <TIM_Base_SetConfig+0x12c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a26      	ldr	r2, [pc, #152]	; (8003278 <TIM_Base_SetConfig+0x130>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <TIM_Base_SetConfig+0x134>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a24      	ldr	r2, [pc, #144]	; (8003280 <TIM_Base_SetConfig+0x138>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a23      	ldr	r2, [pc, #140]	; (8003284 <TIM_Base_SetConfig+0x13c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <TIM_Base_SetConfig+0x114>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_Base_SetConfig+0xf8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a0c      	ldr	r2, [pc, #48]	; (800326c <TIM_Base_SetConfig+0x124>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	615a      	str	r2, [r3, #20]
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40010400 	.word	0x40010400
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	40001800 	.word	0x40001800
 8003280:	40001c00 	.word	0x40001c00
 8003284:	40002000 	.word	0x40002000

08003288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0201 	bic.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f023 0302 	bic.w	r3, r3, #2
 80032d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a20      	ldr	r2, [pc, #128]	; (8003360 <TIM_OC1_SetConfig+0xd8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC1_SetConfig+0x64>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <TIM_OC1_SetConfig+0xdc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <TIM_OC1_SetConfig+0xd8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_OC1_SetConfig+0x8e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <TIM_OC1_SetConfig+0xdc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d111      	bne.n	800333a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40010000 	.word	0x40010000
 8003364:	40010400 	.word	0x40010400

08003368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0210 	bic.w	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <TIM_OC2_SetConfig+0xe4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_OC2_SetConfig+0x68>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <TIM_OC2_SetConfig+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10d      	bne.n	80033ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <TIM_OC2_SetConfig+0xe4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_OC2_SetConfig+0x94>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a16      	ldr	r2, [pc, #88]	; (8003450 <TIM_OC2_SetConfig+0xe8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d113      	bne.n	8003424 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800340a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400

08003454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a21      	ldr	r2, [pc, #132]	; (8003534 <TIM_OC3_SetConfig+0xe0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_OC3_SetConfig+0x66>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <TIM_OC3_SetConfig+0xe4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <TIM_OC3_SetConfig+0xe0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_OC3_SetConfig+0x92>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <TIM_OC3_SetConfig+0xe4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d113      	bne.n	800350e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40010000 	.word	0x40010000
 8003538:	40010400 	.word	0x40010400

0800353c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <TIM_OC4_SetConfig+0xa4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_OC4_SetConfig+0x68>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <TIM_OC4_SetConfig+0xa8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d109      	bne.n	80035b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010400 	.word	0x40010400

080035e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2201      	movs	r2, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1a      	ldr	r2, [r3, #32]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003648:	2302      	movs	r3, #2
 800364a:	e05a      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d01d      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a15      	ldr	r2, [pc, #84]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40010400 	.word	0x40010400
 8003724:	40014000 	.word	0x40014000
 8003728:	40001800 	.word	0x40001800

0800372c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e03f      	b.n	80037e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fee6 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fc7b 	bl	8004094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0ba      	sub	sp, #232	; 0xe8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800382e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_UART_IRQHandler+0x66>
 8003842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fb65 	bl	8003f1e <UART_Receive_IT>
      return;
 8003854:	e256      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80de 	beq.w	8003a1c <HAL_UART_IRQHandler+0x22c>
 8003860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003870:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80d1 	beq.w	8003a1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_UART_IRQHandler+0xae>
 8003886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0xd2>
 80038aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0xf6>
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_UART_IRQHandler+0x126>
 80038f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0208 	orr.w	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 81ed 	beq.w	8003cfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_UART_IRQHandler+0x14e>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 faf0 	bl	8003f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_UART_IRQHandler+0x17a>
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d04f      	beq.n	8003a0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f9f8 	bl	8003d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d141      	bne.n	8003a02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3314      	adds	r3, #20
 80039a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1d9      	bne.n	800397e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4a7d      	ldr	r2, [pc, #500]	; (8003bcc <HAL_UART_IRQHandler+0x3dc>)
 80039d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe f8b9 	bl	8001b56 <HAL_DMA_Abort_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f4:	4610      	mov	r0, r2
 80039f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e00e      	b.n	8003a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f99a 	bl	8003d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e00a      	b.n	8003a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f996 	bl	8003d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e006      	b.n	8003a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f992 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a16:	e170      	b.n	8003cfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	bf00      	nop
    return;
 8003a1a:	e16e      	b.n	8003cfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 814a 	bne.w	8003cba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8143 	beq.w	8003cba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 813c 	beq.w	8003cba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	f040 80b4 	bne.w	8003bd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8140 	beq.w	8003cfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a86:	429a      	cmp	r2, r3
 8003a88:	f080 8139 	bcs.w	8003cfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9e:	f000 8088 	beq.w	8003bb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1d9      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e1      	bne.n	8003aee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e3      	bne.n	8003b2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	f023 0310 	bic.w	r3, r3, #16
 8003b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b94:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e3      	bne.n	8003b70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd ff62 	bl	8001a76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8c0 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc8:	e099      	b.n	8003cfe <HAL_UART_IRQHandler+0x50e>
 8003bca:	bf00      	nop
 8003bcc:	08003e27 	.word	0x08003e27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808b 	beq.w	8003d02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8086 	beq.w	8003d02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e3      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3314      	adds	r3, #20
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c52:	633a      	str	r2, [r7, #48]	; 0x30
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e3      	bne.n	8003c2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e3      	bne.n	8003c74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f848 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cb8:	e023      	b.n	8003d02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_UART_IRQHandler+0x4ea>
 8003cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8bb 	bl	8003e4e <UART_Transmit_IT>
    return;
 8003cd8:	e014      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <HAL_UART_IRQHandler+0x514>
 8003ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8fb 	bl	8003eee <UART_EndTransmit_IT>
    return;
 8003cf8:	e004      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
    return;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
      return;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
      return;
 8003d02:	bf00      	nop
  }
}
 8003d04:	37e8      	adds	r7, #232	; 0xe8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop

08003d0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b095      	sub	sp, #84	; 0x54
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d88:	643a      	str	r2, [r7, #64]	; 0x40
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d119      	bne.n	8003e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	647b      	str	r3, [r7, #68]	; 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df8:	61ba      	str	r2, [r7, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e1a:	bf00      	nop
 8003e1c:	3754      	adds	r7, #84	; 0x54
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff77 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b21      	cmp	r3, #33	; 0x21
 8003e60:	d13e      	bne.n	8003ee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	d114      	bne.n	8003e96 <UART_Transmit_IT+0x48>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d110      	bne.n	8003e96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	e008      	b.n	8003ea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6211      	str	r1, [r2, #32]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fefc 	bl	8003d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08c      	sub	sp, #48	; 0x30
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b22      	cmp	r3, #34	; 0x22
 8003f30:	f040 80ab 	bne.w	800408a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d117      	bne.n	8003f6e <UART_Receive_IT+0x50>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f6c:	e026      	b.n	8003fbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f80:	d007      	beq.n	8003f92 <UART_Receive_IT+0x74>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <UART_Receive_IT+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e008      	b.n	8003fb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d15a      	bne.n	8004086 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0220 	bic.w	r2, r2, #32
 8003fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d135      	bne.n	800407c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f023 0310 	bic.w	r3, r3, #16
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	623a      	str	r2, [r7, #32]
 8004038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	61bb      	str	r3, [r7, #24]
   return(result);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b10      	cmp	r3, #16
 8004056:	d10a      	bne.n	800406e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fe67 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
 800407a:	e002      	b.n	8004082 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe4f 	bl	8003d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e002      	b.n	800408c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3730      	adds	r7, #48	; 0x30
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	b09f      	sub	sp, #124	; 0x7c
 800409a:	af00      	add	r7, sp, #0
 800409c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	ea40 0301 	orr.w	r3, r0, r1
 80040b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	431a      	orrs	r2, r3
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040d8:	f021 010c 	bic.w	r1, r1, #12
 80040dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e2:	430b      	orrs	r3, r1
 80040e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f2:	6999      	ldr	r1, [r3, #24]
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	ea40 0301 	orr.w	r3, r0, r1
 80040fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4bc5      	ldr	r3, [pc, #788]	; (8004418 <UART_SetConfig+0x384>)
 8004104:	429a      	cmp	r2, r3
 8004106:	d004      	beq.n	8004112 <UART_SetConfig+0x7e>
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4bc3      	ldr	r3, [pc, #780]	; (800441c <UART_SetConfig+0x388>)
 800410e:	429a      	cmp	r2, r3
 8004110:	d103      	bne.n	800411a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004112:	f7fe fb59 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8004116:	6778      	str	r0, [r7, #116]	; 0x74
 8004118:	e002      	b.n	8004120 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800411a:	f7fe fb41 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800411e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004128:	f040 80b6 	bne.w	8004298 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800412c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412e:	461c      	mov	r4, r3
 8004130:	f04f 0500 	mov.w	r5, #0
 8004134:	4622      	mov	r2, r4
 8004136:	462b      	mov	r3, r5
 8004138:	1891      	adds	r1, r2, r2
 800413a:	6439      	str	r1, [r7, #64]	; 0x40
 800413c:	415b      	adcs	r3, r3
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
 8004140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004144:	1912      	adds	r2, r2, r4
 8004146:	eb45 0303 	adc.w	r3, r5, r3
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	00d9      	lsls	r1, r3, #3
 8004154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004158:	00d0      	lsls	r0, r2, #3
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	1911      	adds	r1, r2, r4
 8004160:	6639      	str	r1, [r7, #96]	; 0x60
 8004162:	416b      	adcs	r3, r5
 8004164:	667b      	str	r3, [r7, #100]	; 0x64
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	461a      	mov	r2, r3
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	1891      	adds	r1, r2, r2
 8004172:	63b9      	str	r1, [r7, #56]	; 0x38
 8004174:	415b      	adcs	r3, r3
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800417c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004180:	f7fc f86c 	bl	800025c <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4ba5      	ldr	r3, [pc, #660]	; (8004420 <UART_SetConfig+0x38c>)
 800418a:	fba3 2302 	umull	r2, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	011e      	lsls	r6, r3, #4
 8004192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004194:	461c      	mov	r4, r3
 8004196:	f04f 0500 	mov.w	r5, #0
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	1891      	adds	r1, r2, r2
 80041a0:	6339      	str	r1, [r7, #48]	; 0x30
 80041a2:	415b      	adcs	r3, r3
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
 80041a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041aa:	1912      	adds	r2, r2, r4
 80041ac:	eb45 0303 	adc.w	r3, r5, r3
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	00d9      	lsls	r1, r3, #3
 80041ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041be:	00d0      	lsls	r0, r2, #3
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	1911      	adds	r1, r2, r4
 80041c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80041c8:	416b      	adcs	r3, r5
 80041ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	461a      	mov	r2, r3
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80041da:	415b      	adcs	r3, r3
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041e6:	f7fc f839 	bl	800025c <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4b8c      	ldr	r3, [pc, #560]	; (8004420 <UART_SetConfig+0x38c>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a87      	ldr	r2, [pc, #540]	; (8004420 <UART_SetConfig+0x38c>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004210:	441e      	add	r6, r3
 8004212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004214:	4618      	mov	r0, r3
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	1894      	adds	r4, r2, r2
 8004220:	623c      	str	r4, [r7, #32]
 8004222:	415b      	adcs	r3, r3
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
 8004226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800422a:	1812      	adds	r2, r2, r0
 800422c:	eb41 0303 	adc.w	r3, r1, r3
 8004230:	f04f 0400 	mov.w	r4, #0
 8004234:	f04f 0500 	mov.w	r5, #0
 8004238:	00dd      	lsls	r5, r3, #3
 800423a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800423e:	00d4      	lsls	r4, r2, #3
 8004240:	4622      	mov	r2, r4
 8004242:	462b      	mov	r3, r5
 8004244:	1814      	adds	r4, r2, r0
 8004246:	653c      	str	r4, [r7, #80]	; 0x50
 8004248:	414b      	adcs	r3, r1
 800424a:	657b      	str	r3, [r7, #84]	; 0x54
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	461a      	mov	r2, r3
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	1891      	adds	r1, r2, r2
 8004258:	61b9      	str	r1, [r7, #24]
 800425a:	415b      	adcs	r3, r3
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004266:	f7fb fff9 	bl	800025c <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b6c      	ldr	r3, [pc, #432]	; (8004420 <UART_SetConfig+0x38c>)
 8004270:	fba3 1302 	umull	r1, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a67      	ldr	r2, [pc, #412]	; (8004420 <UART_SetConfig+0x38c>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 0207 	and.w	r2, r3, #7
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4432      	add	r2, r6
 8004294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004296:	e0b9      	b.n	800440c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429a:	461c      	mov	r4, r3
 800429c:	f04f 0500 	mov.w	r5, #0
 80042a0:	4622      	mov	r2, r4
 80042a2:	462b      	mov	r3, r5
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	6139      	str	r1, [r7, #16]
 80042a8:	415b      	adcs	r3, r3
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042b0:	1912      	adds	r2, r2, r4
 80042b2:	eb45 0303 	adc.w	r3, r5, r3
 80042b6:	f04f 0000 	mov.w	r0, #0
 80042ba:	f04f 0100 	mov.w	r1, #0
 80042be:	00d9      	lsls	r1, r3, #3
 80042c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042c4:	00d0      	lsls	r0, r2, #3
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	eb12 0804 	adds.w	r8, r2, r4
 80042ce:	eb43 0905 	adc.w	r9, r3, r5
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	008b      	lsls	r3, r1, #2
 80042e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ea:	0082      	lsls	r2, r0, #2
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fb ffb4 	bl	800025c <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4b49      	ldr	r3, [pc, #292]	; (8004420 <UART_SetConfig+0x38c>)
 80042fa:	fba3 2302 	umull	r2, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	011e      	lsls	r6, r3, #4
 8004302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004304:	4618      	mov	r0, r3
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	1894      	adds	r4, r2, r2
 8004310:	60bc      	str	r4, [r7, #8]
 8004312:	415b      	adcs	r3, r3
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800431a:	1812      	adds	r2, r2, r0
 800431c:	eb41 0303 	adc.w	r3, r1, r3
 8004320:	f04f 0400 	mov.w	r4, #0
 8004324:	f04f 0500 	mov.w	r5, #0
 8004328:	00dd      	lsls	r5, r3, #3
 800432a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800432e:	00d4      	lsls	r4, r2, #3
 8004330:	4622      	mov	r2, r4
 8004332:	462b      	mov	r3, r5
 8004334:	1814      	adds	r4, r2, r0
 8004336:	64bc      	str	r4, [r7, #72]	; 0x48
 8004338:	414b      	adcs	r3, r1
 800433a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	008b      	lsls	r3, r1, #2
 8004350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004354:	0082      	lsls	r2, r0, #2
 8004356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800435a:	f7fb ff7f 	bl	800025c <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <UART_SetConfig+0x38c>)
 8004364:	fba3 1302 	umull	r1, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	2164      	movs	r1, #100	; 0x64
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	3332      	adds	r3, #50	; 0x32
 8004376:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <UART_SetConfig+0x38c>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004382:	441e      	add	r6, r3
 8004384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004386:	4618      	mov	r0, r3
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	1894      	adds	r4, r2, r2
 8004392:	603c      	str	r4, [r7, #0]
 8004394:	415b      	adcs	r3, r3
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439c:	1812      	adds	r2, r2, r0
 800439e:	eb41 0303 	adc.w	r3, r1, r3
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	f04f 0500 	mov.w	r5, #0
 80043aa:	00dd      	lsls	r5, r3, #3
 80043ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043b0:	00d4      	lsls	r4, r2, #3
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	eb12 0a00 	adds.w	sl, r2, r0
 80043ba:	eb43 0b01 	adc.w	fp, r3, r1
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	008b      	lsls	r3, r1, #2
 80043d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043d6:	0082      	lsls	r2, r0, #2
 80043d8:	4650      	mov	r0, sl
 80043da:	4659      	mov	r1, fp
 80043dc:	f7fb ff3e 	bl	800025c <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <UART_SetConfig+0x38c>)
 80043e6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2164      	movs	r1, #100	; 0x64
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	3332      	adds	r3, #50	; 0x32
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <UART_SetConfig+0x38c>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4432      	add	r2, r6
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	377c      	adds	r7, #124	; 0x7c
 8004410:	46bd      	mov	sp, r7
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	bf00      	nop
 8004418:	40011000 	.word	0x40011000
 800441c:	40011400 	.word	0x40011400
 8004420:	51eb851f 	.word	0x51eb851f

08004424 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <_DoInit+0x98>)
 800442c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2203      	movs	r2, #3
 8004432:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2203      	movs	r2, #3
 8004438:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <_DoInit+0x9c>)
 800443e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <_DoInit+0xa0>)
 8004444:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800444c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a17      	ldr	r2, [pc, #92]	; (80044c0 <_DoInit+0x9c>)
 8004464:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <_DoInit+0xa4>)
 800446a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2210      	movs	r2, #16
 8004470:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3307      	adds	r3, #7
 8004488:	4a10      	ldr	r2, [pc, #64]	; (80044cc <_DoInit+0xa8>)
 800448a:	6810      	ldr	r0, [r2, #0]
 800448c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800448e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <_DoInit+0xac>)
 8004496:	6810      	ldr	r0, [r2, #0]
 8004498:	6018      	str	r0, [r3, #0]
 800449a:	8891      	ldrh	r1, [r2, #4]
 800449c:	7992      	ldrb	r2, [r2, #6]
 800449e:	8099      	strh	r1, [r3, #4]
 80044a0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044a2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044ac:	f3bf 8f5f 	dmb	sy
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000cb4 	.word	0x20000cb4
 80044c0:	08005564 	.word	0x08005564
 80044c4:	20000030 	.word	0x20000030
 80044c8:	20000430 	.word	0x20000430
 80044cc:	08005570 	.word	0x08005570
 80044d0:	08005574 	.word	0x08005574

080044d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	; 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80044e0:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <SEGGER_RTT_ReadNoLock+0x108>)
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80044ee:	f7ff ff99 	bl	8004424 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	3360      	adds	r3, #96	; 0x60
 80044fe:	4a37      	ldr	r2, [pc, #220]	; (80045dc <SEGGER_RTT_ReadNoLock+0x108>)
 8004500:	4413      	add	r3, r2
 8004502:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004514:	2300      	movs	r3, #0
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d92b      	bls.n	8004578 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4293      	cmp	r3, r2
 8004530:	bf28      	it	cs
 8004532:	4613      	movcs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	4413      	add	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004546:	f000 ffe3 	bl	8005510 <memcpy>
    NumBytesRead += NumBytesRem;
 800454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4413      	add	r3, r2
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004570:	429a      	cmp	r2, r3
 8004572:	d101      	bne.n	8004578 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4293      	cmp	r3, r2
 8004586:	bf28      	it	cs
 8004588:	4613      	movcs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d019      	beq.n	80045c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	4413      	add	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045a2:	f000 ffb5 	bl	8005510 <memcpy>
    NumBytesRead += NumBytesRem;
 80045a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3730      	adds	r7, #48	; 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000cb4 	.word	0x20000cb4

080045e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80045ee:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <SEGGER_RTT_AllocUpBuffer+0x20>
 80045fc:	f7ff ff12 	bl	8004424 <_DoInit>
  SEGGER_RTT_LOCK();
 8004600:	f3ef 8311 	mrs	r3, BASEPRI
 8004604:	f04f 0120 	mov.w	r1, #32
 8004608:	f381 8811 	msr	BASEPRI, r1
 800460c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800460e:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004610:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	3304      	adds	r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	429a      	cmp	r2, r3
 800463c:	dbeb      	blt.n	8004616 <SEGGER_RTT_AllocUpBuffer+0x36>
 800463e:	e000      	b.n	8004642 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004640:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	da3f      	bge.n	80046cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	3304      	adds	r3, #4
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	3320      	adds	r3, #32
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800468a:	6939      	ldr	r1, [r7, #16]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	3328      	adds	r3, #40	; 0x28
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	3324      	adds	r3, #36	; 0x24
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80046b2:	6939      	ldr	r1, [r7, #16]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	332c      	adds	r3, #44	; 0x2c
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046c6:	f3bf 8f5f 	dmb	sy
 80046ca:	e002      	b.n	80046d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80046d8:	69fb      	ldr	r3, [r7, #28]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000cb4 	.word	0x20000cb4

080046e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80046f6:	4b33      	ldr	r3, [pc, #204]	; (80047c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004704:	f7ff fe8e 	bl	8004424 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004708:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800470a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	461a      	mov	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4293      	cmp	r3, r2
 8004716:	d24d      	bcs.n	80047b4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004718:	f3ef 8311 	mrs	r3, BASEPRI
 800471c:	f04f 0120 	mov.w	r1, #32
 8004720:	f381 8811 	msr	BASEPRI, r1
 8004724:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d031      	beq.n	8004790 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3360      	adds	r3, #96	; 0x60
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	440b      	add	r3, r1
 800474e:	3364      	adds	r3, #100	; 0x64
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004754:	6979      	ldr	r1, [r7, #20]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	440b      	add	r3, r1
 8004762:	3368      	adds	r3, #104	; 0x68
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004768:	6979      	ldr	r1, [r7, #20]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	3370      	adds	r3, #112	; 0x70
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800477c:	6979      	ldr	r1, [r7, #20]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	440b      	add	r3, r1
 800478a:	336c      	adds	r3, #108	; 0x6c
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	440b      	add	r3, r1
 800479e:	3374      	adds	r3, #116	; 0x74
 80047a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e002      	b.n	80047ba <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000cb4 	.word	0x20000cb4

080047c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047d8:	e002      	b.n	80047e0 <_EncodeStr+0x18>
    Len++;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3301      	adds	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4413      	add	r3, r2
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f6      	bne.n	80047da <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d901      	bls.n	80047f8 <_EncodeStr+0x30>
    Len = Limit;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2bfe      	cmp	r3, #254	; 0xfe
 80047fc:	d806      	bhi.n	800480c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	60fa      	str	r2, [r7, #12]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e011      	b.n	8004830 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	60fa      	str	r2, [r7, #12]
 8004812:	22ff      	movs	r2, #255	; 0xff
 8004814:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	60fa      	str	r2, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	0a19      	lsrs	r1, r3, #8
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	60fa      	str	r2, [r7, #12]
 800482c:	b2ca      	uxtb	r2, r1
 800482e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004834:	e00a      	b.n	800484c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	1c53      	adds	r3, r2, #1
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	60f9      	str	r1, [r7, #12]
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	701a      	strb	r2, [r3, #0]
    n++;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3301      	adds	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3f0      	bcc.n	8004836 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	4618      	mov	r0, r3
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <_HandleIncomingPacket+0xe0>)
 8004884:	7e1b      	ldrb	r3, [r3, #24]
 8004886:	4618      	mov	r0, r3
 8004888:	1cfb      	adds	r3, r7, #3
 800488a:	2201      	movs	r2, #1
 800488c:	4619      	mov	r1, r3
 800488e:	f7ff fe21 	bl	80044d4 <SEGGER_RTT_ReadNoLock>
 8004892:	4603      	mov	r3, r0
 8004894:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dd54      	ble.n	8004946 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d032      	beq.n	8004908 <_HandleIncomingPacket+0x8c>
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	dc42      	bgt.n	800492c <_HandleIncomingPacket+0xb0>
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	dc16      	bgt.n	80048d8 <_HandleIncomingPacket+0x5c>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dd3e      	ble.n	800492c <_HandleIncomingPacket+0xb0>
 80048ae:	3b01      	subs	r3, #1
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	d83b      	bhi.n	800492c <_HandleIncomingPacket+0xb0>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <_HandleIncomingPacket+0x40>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048df 	.word	0x080048df
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048eb 	.word	0x080048eb
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f7 	.word	0x080048f7
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004903 	.word	0x08004903
 80048d8:	2b7f      	cmp	r3, #127	; 0x7f
 80048da:	d036      	beq.n	800494a <_HandleIncomingPacket+0xce>
 80048dc:	e026      	b.n	800492c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80048de:	f000 fa9f 	bl	8004e20 <SEGGER_SYSVIEW_Start>
      break;
 80048e2:	e037      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80048e4:	f000 fb56 	bl	8004f94 <SEGGER_SYSVIEW_Stop>
      break;
 80048e8:	e034      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80048ea:	f000 fc4b 	bl	8005184 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80048ee:	e031      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80048f0:	f000 fc10 	bl	8005114 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80048f4:	e02e      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80048f6:	f000 fb73 	bl	8004fe0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80048fa:	e02b      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80048fc:	f000 fd70 	bl	80053e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004900:	e028      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004902:	f000 fd4f 	bl	80053a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004906:	e025      	b.n	8004954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <_HandleIncomingPacket+0xe0>)
 800490a:	7e1b      	ldrb	r3, [r3, #24]
 800490c:	4618      	mov	r0, r3
 800490e:	1cfb      	adds	r3, r7, #3
 8004910:	2201      	movs	r2, #1
 8004912:	4619      	mov	r1, r3
 8004914:	f7ff fdde 	bl	80044d4 <SEGGER_RTT_ReadNoLock>
 8004918:	4603      	mov	r3, r0
 800491a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	dd15      	ble.n	800494e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fcbd 	bl	80052a4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800492a:	e010      	b.n	800494e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	b25b      	sxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	da0e      	bge.n	8004952 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <_HandleIncomingPacket+0xe0>)
 8004936:	7e1b      	ldrb	r3, [r3, #24]
 8004938:	4618      	mov	r0, r3
 800493a:	1cfb      	adds	r3, r7, #3
 800493c:	2201      	movs	r2, #1
 800493e:	4619      	mov	r1, r3
 8004940:	f7ff fdc8 	bl	80044d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004944:	e005      	b.n	8004952 <_HandleIncomingPacket+0xd6>
    }
  }
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <_HandleIncomingPacket+0xd8>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <_HandleIncomingPacket+0xd8>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <_HandleIncomingPacket+0xd8>
      break;
 8004952:	bf00      	nop
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000848 	.word	0x20000848

08004960 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b08c      	sub	sp, #48	; 0x30
 8004964:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004966:	2301      	movs	r3, #1
 8004968:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004974:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
 800497a:	e00b      	b.n	8004994 <_TrySendOverflowPacket+0x34>
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	b2da      	uxtb	r2, r3
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	09db      	lsrs	r3, r3, #7
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	2b7f      	cmp	r3, #127	; 0x7f
 8004998:	d8f0      	bhi.n	800497c <_TrySendOverflowPacket+0x1c>
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049aa:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <_TrySendOverflowPacket+0xe0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049b0:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	e00b      	b.n	80049dc <_TrySendOverflowPacket+0x7c>
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1c59      	adds	r1, r3, #1
 80049cc:	6279      	str	r1, [r7, #36]	; 0x24
 80049ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	09db      	lsrs	r3, r3, #7
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	2b7f      	cmp	r3, #127	; 0x7f
 80049e0:	d8f0      	bhi.n	80049c4 <_TrySendOverflowPacket+0x64>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	627a      	str	r2, [r7, #36]	; 0x24
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	4618      	mov	r0, r3
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	1d3b      	adds	r3, r7, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7fb fbe0 	bl	80001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a18:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e004      	b.n	8004a30 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <_TrySendOverflowPacket+0xdc>)
 8004a2e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004a30:	693b      	ldr	r3, [r7, #16]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000848 	.word	0x20000848
 8004a40:	e0001004 	.word	0xe0001004

08004a44 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004a50:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <_SendPacket+0x1c0>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d010      	beq.n	8004a7a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004a58:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <_SendPacket+0x1c0>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a3 	beq.w	8004ba8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004a62:	4b68      	ldr	r3, [pc, #416]	; (8004c04 <_SendPacket+0x1c0>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d109      	bne.n	8004a7e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004a6a:	f7ff ff79 	bl	8004960 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004a6e:	4b65      	ldr	r3, [pc, #404]	; (8004c04 <_SendPacket+0x1c0>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	f040 809a 	bne.w	8004bac <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004a78:	e001      	b.n	8004a7e <_SendPacket+0x3a>
    goto Send;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <_SendPacket+0x3c>
Send:
 8004a7e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b1f      	cmp	r3, #31
 8004a84:	d809      	bhi.n	8004a9a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <_SendPacket+0x1c0>)
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 808b 	bne.w	8004bb0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b17      	cmp	r3, #23
 8004a9e:	d807      	bhi.n	8004ab0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e03d      	b.n	8004b2c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b7f      	cmp	r3, #127	; 0x7f
 8004abc:	d912      	bls.n	8004ae4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	09da      	lsrs	r2, r3, #7
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e006      	b.n	8004af2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b7f      	cmp	r3, #127	; 0x7f
 8004af6:	d912      	bls.n	8004b1e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	09da      	lsrs	r2, r3, #7
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	60fa      	str	r2, [r7, #12]
 8004b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e006      	b.n	8004b2c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b2c:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <_SendPacket+0x1c4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <_SendPacket+0x1c0>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	e00b      	b.n	8004b5e <_SendPacket+0x11a>
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	6279      	str	r1, [r7, #36]	; 0x24
 8004b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	09db      	lsrs	r3, r3, #7
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2b7f      	cmp	r3, #127	; 0x7f
 8004b62:	d8f0      	bhi.n	8004b46 <_SendPacket+0x102>
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	627a      	str	r2, [r7, #36]	; 0x24
 8004b6a:	6a3a      	ldr	r2, [r7, #32]
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <_SendPacket+0x1c0>)
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	f7fb fb20 	bl	80001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b92:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <_SendPacket+0x1c0>)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	60d3      	str	r3, [r2, #12]
 8004b98:	e00b      	b.n	8004bb2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <_SendPacket+0x1c0>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <_SendPacket+0x1c0>)
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e004      	b.n	8004bb2 <_SendPacket+0x16e>
    goto SendDone;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <_SendPacket+0x16e>
      goto SendDone;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <_SendPacket+0x16e>
      goto SendDone;
 8004bb0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <_SendPacket+0x1c0>)
 8004bb4:	7e1b      	ldrb	r3, [r3, #24]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <_SendPacket+0x1c8>)
 8004bba:	460b      	mov	r3, r1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	440b      	add	r3, r1
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	336c      	adds	r3, #108	; 0x6c
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <_SendPacket+0x1c0>)
 8004bca:	7e1b      	ldrb	r3, [r3, #24]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	490f      	ldr	r1, [pc, #60]	; (8004c0c <_SendPacket+0x1c8>)
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4403      	add	r3, r0
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	440b      	add	r3, r1
 8004bda:	3370      	adds	r3, #112	; 0x70
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d00b      	beq.n	8004bfa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <_SendPacket+0x1c0>)
 8004be4:	789b      	ldrb	r3, [r3, #2]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d107      	bne.n	8004bfa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <_SendPacket+0x1c0>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bf0:	f7ff fe44 	bl	800487c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <_SendPacket+0x1c0>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bfa:	bf00      	nop
 8004bfc:	3728      	adds	r7, #40	; 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000848 	.word	0x20000848
 8004c08:	e0001004 	.word	0xe0001004
 8004c0c:	20000cb4 	.word	0x20000cb4

08004c10 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c24:	4917      	ldr	r1, [pc, #92]	; (8004c84 <SEGGER_SYSVIEW_Init+0x74>)
 8004c26:	4818      	ldr	r0, [pc, #96]	; (8004c88 <SEGGER_SYSVIEW_Init+0x78>)
 8004c28:	f7ff fcda 	bl	80045e0 <SEGGER_RTT_AllocUpBuffer>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c32:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c34:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c36:	785a      	ldrb	r2, [r3, #1]
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c3c:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3e:	7e1b      	ldrb	r3, [r3, #24]
 8004c40:	4618      	mov	r0, r3
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2308      	movs	r3, #8
 8004c48:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <SEGGER_SYSVIEW_Init+0x80>)
 8004c4a:	490f      	ldr	r1, [pc, #60]	; (8004c88 <SEGGER_SYSVIEW_Init+0x78>)
 8004c4c:	f7ff fd4c 	bl	80046e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <SEGGER_SYSVIEW_Init+0x84>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c5c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c64:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c6a:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c70:	4a06      	ldr	r2, [pc, #24]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000440 	.word	0x20000440
 8004c88:	0800557c 	.word	0x0800557c
 8004c8c:	20000848 	.word	0x20000848
 8004c90:	20000840 	.word	0x20000840
 8004c94:	e0001004 	.word	0xe0001004

08004c98 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ca0:	4a04      	ldr	r2, [pc, #16]	; (8004cb4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6113      	str	r3, [r2, #16]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000848 	.word	0x20000848

08004cb8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc4:	f04f 0120 	mov.w	r1, #32
 8004cc8:	f381 8811 	msr	BASEPRI, r1
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	4808      	ldr	r0, [pc, #32]	; (8004cf0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cd0:	f7ff fdc7 	bl	8004862 <_PreparePacket>
 8004cd4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68b8      	ldr	r0, [r7, #8]
 8004cdc:	f7ff feb2 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f383 8811 	msr	BASEPRI, r3
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000878 	.word	0x20000878

08004cf4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004d02:	f04f 0120 	mov.w	r1, #32
 8004d06:	f381 8811 	msr	BASEPRI, r1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	4816      	ldr	r0, [pc, #88]	; (8004d68 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d0e:	f7ff fda8 	bl	8004862 <_PreparePacket>
 8004d12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e00b      	b.n	8004d3a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	61f9      	str	r1, [r7, #28]
 8004d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	09db      	lsrs	r3, r3, #7
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3e:	d8f0      	bhi.n	8004d22 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	61fa      	str	r2, [r7, #28]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	6938      	ldr	r0, [r7, #16]
 8004d56:	f7ff fe75 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f383 8811 	msr	BASEPRI, r3
}
 8004d60:	bf00      	nop
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000878 	.word	0x20000878

08004d6c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d78:	f3ef 8311 	mrs	r3, BASEPRI
 8004d7c:	f04f 0120 	mov.w	r1, #32
 8004d80:	f381 8811 	msr	BASEPRI, r1
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	4825      	ldr	r0, [pc, #148]	; (8004e1c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d88:	f7ff fd6b 	bl	8004862 <_PreparePacket>
 8004d8c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d9a:	e00b      	b.n	8004db4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	09db      	lsrs	r3, r3, #7
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	2b7f      	cmp	r3, #127	; 0x7f
 8004db8:	d8f0      	bhi.n	8004d9c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	e00b      	b.n	8004dec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	1c59      	adds	r1, r3, #1
 8004ddc:	6279      	str	r1, [r7, #36]	; 0x24
 8004dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	09db      	lsrs	r3, r3, #7
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2b7f      	cmp	r3, #127	; 0x7f
 8004df0:	d8f0      	bhi.n	8004dd4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	627a      	str	r2, [r7, #36]	; 0x24
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	6979      	ldr	r1, [r7, #20]
 8004e06:	69b8      	ldr	r0, [r7, #24]
 8004e08:	f7ff fe1c 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f383 8811 	msr	BASEPRI, r3
}
 8004e12:	bf00      	nop
 8004e14:	3730      	adds	r7, #48	; 0x30
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000878 	.word	0x20000878

08004e20 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e26:	4b58      	ldr	r3, [pc, #352]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e30:	f04f 0120 	mov.w	r1, #32
 8004e34:	f381 8811 	msr	BASEPRI, r1
 8004e38:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e3a:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	220a      	movs	r2, #10
 8004e40:	4952      	ldr	r1, [pc, #328]	; (8004f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fb f9c0 	bl	80001c8 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e4e:	200a      	movs	r0, #10
 8004e50:	f7ff ff32 	bl	8004cb8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e54:	f3ef 8311 	mrs	r3, BASEPRI
 8004e58:	f04f 0120 	mov.w	r1, #32
 8004e5c:	f381 8811 	msr	BASEPRI, r1
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	484b      	ldr	r0, [pc, #300]	; (8004f90 <SEGGER_SYSVIEW_Start+0x170>)
 8004e64:	f7ff fcfd 	bl	8004862 <_PreparePacket>
 8004e68:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e72:	4b45      	ldr	r3, [pc, #276]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e78:	e00b      	b.n	8004e92 <SEGGER_SYSVIEW_Start+0x72>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	1c59      	adds	r1, r3, #1
 8004e82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	09db      	lsrs	r3, r3, #7
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	2b7f      	cmp	r3, #127	; 0x7f
 8004e96:	d8f0      	bhi.n	8004e7a <SEGGER_SYSVIEW_Start+0x5a>
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004eac:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	e00b      	b.n	8004ecc <SEGGER_SYSVIEW_Start+0xac>
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1c59      	adds	r1, r3, #1
 8004ebc:	6279      	str	r1, [r7, #36]	; 0x24
 8004ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	09db      	lsrs	r3, r3, #7
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed0:	d8f0      	bhi.n	8004eb4 <SEGGER_SYSVIEW_Start+0x94>
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e00b      	b.n	8004f06 <SEGGER_SYSVIEW_Start+0xe6>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	1c59      	adds	r1, r3, #1
 8004ef6:	61f9      	str	r1, [r7, #28]
 8004ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	09db      	lsrs	r3, r3, #7
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0a:	d8f0      	bhi.n	8004eee <SEGGER_SYSVIEW_Start+0xce>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	61fa      	str	r2, [r7, #28]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	e00b      	b.n	8004f3e <SEGGER_SYSVIEW_Start+0x11e>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	1c59      	adds	r1, r3, #1
 8004f2e:	6179      	str	r1, [r7, #20]
 8004f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	09db      	lsrs	r3, r3, #7
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b7f      	cmp	r3, #127	; 0x7f
 8004f42:	d8f0      	bhi.n	8004f26 <SEGGER_SYSVIEW_Start+0x106>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	617a      	str	r2, [r7, #20]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f54:	2218      	movs	r2, #24
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fd73 	bl	8004a44 <_SendPacket>
      RECORD_END();
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <SEGGER_SYSVIEW_Start+0x168>)
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f72:	f000 f907 	bl	8005184 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f76:	f000 f8cd 	bl	8005114 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f7a:	f000 fa31 	bl	80053e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f7e:	bf00      	nop
 8004f80:	3730      	adds	r7, #48	; 0x30
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000848 	.word	0x20000848
 8004f8c:	08005604 	.word	0x08005604
 8004f90:	20000878 	.word	0x20000878

08004f94 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9e:	f04f 0120 	mov.w	r1, #32
 8004fa2:	f381 8811 	msr	BASEPRI, r1
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	480b      	ldr	r0, [pc, #44]	; (8004fd8 <SEGGER_SYSVIEW_Stop+0x44>)
 8004faa:	f7ff fc5a 	bl	8004862 <_PreparePacket>
 8004fae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <SEGGER_SYSVIEW_Stop+0x48>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004fb8:	220b      	movs	r2, #11
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	f7ff fd41 	bl	8004a44 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <SEGGER_SYSVIEW_Stop+0x48>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000878 	.word	0x20000878
 8004fdc:	20000848 	.word	0x20000848

08004fe0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fea:	f04f 0120 	mov.w	r1, #32
 8004fee:	f381 8811 	msr	BASEPRI, r1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	4845      	ldr	r0, [pc, #276]	; (800510c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004ff6:	f7ff fc34 	bl	8004862 <_PreparePacket>
 8004ffa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005004:	4b42      	ldr	r3, [pc, #264]	; (8005110 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
 800500a:	e00b      	b.n	8005024 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	b2da      	uxtb	r2, r3
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	09db      	lsrs	r3, r3, #7
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	2b7f      	cmp	r3, #127	; 0x7f
 8005028:	d8f0      	bhi.n	800500c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	4b34      	ldr	r3, [pc, #208]	; (8005110 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	623b      	str	r3, [r7, #32]
 8005044:	e00b      	b.n	800505e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	6279      	str	r1, [r7, #36]	; 0x24
 8005050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	2b7f      	cmp	r3, #127	; 0x7f
 8005062:	d8f0      	bhi.n	8005046 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	627a      	str	r2, [r7, #36]	; 0x24
 800506a:	6a3a      	ldr	r2, [r7, #32]
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	4b25      	ldr	r3, [pc, #148]	; (8005110 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e00b      	b.n	8005098 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	61f9      	str	r1, [r7, #28]
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	61fa      	str	r2, [r7, #28]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e00b      	b.n	80050d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1c59      	adds	r1, r3, #1
 80050c0:	6179      	str	r1, [r7, #20]
 80050c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	09db      	lsrs	r3, r3, #7
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b7f      	cmp	r3, #127	; 0x7f
 80050d4:	d8f0      	bhi.n	80050b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	617a      	str	r2, [r7, #20]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050e6:	2218      	movs	r2, #24
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f7ff fcaa 	bl	8004a44 <_SendPacket>
  RECORD_END();
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	4798      	blx	r3
  }
}
 8005104:	bf00      	nop
 8005106:	3730      	adds	r7, #48	; 0x30
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000878 	.word	0x20000878
 8005110:	20000848 	.word	0x20000848

08005114 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005118:	4b07      	ldr	r3, [pc, #28]	; (8005138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800512a:	4b03      	ldr	r3, [pc, #12]	; (8005138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4798      	blx	r3
  }
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000848 	.word	0x20000848

0800513c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005144:	f3ef 8311 	mrs	r3, BASEPRI
 8005148:	f04f 0120 	mov.w	r1, #32
 800514c:	f381 8811 	msr	BASEPRI, r1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	480b      	ldr	r0, [pc, #44]	; (8005180 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005154:	f7ff fb85 	bl	8004862 <_PreparePacket>
 8005158:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	6938      	ldr	r0, [r7, #16]
 8005160:	f7ff fb32 	bl	80047c8 <_EncodeStr>
 8005164:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005166:	220e      	movs	r2, #14
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	6938      	ldr	r0, [r7, #16]
 800516c:	f7ff fc6a 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f383 8811 	msr	BASEPRI, r3
}
 8005176:	bf00      	nop
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000878 	.word	0x20000878

08005184 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01a      	beq.n	80051c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4798      	blx	r3
 80051a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80051aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	000a      	movs	r2, r1
 80051b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051ba:	4613      	mov	r3, r2
 80051bc:	461a      	mov	r2, r3
 80051be:	4621      	mov	r1, r4
 80051c0:	200d      	movs	r0, #13
 80051c2:	f7ff fdd3 	bl	8004d6c <SEGGER_SYSVIEW_RecordU32x2>
 80051c6:	e006      	b.n	80051d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	200c      	movs	r0, #12
 80051d0:	f7ff fd90 	bl	8004cf4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd90      	pop	{r4, r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000848 	.word	0x20000848
 80051e4:	e0001004 	.word	0xe0001004

080051e8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051ee:	f3ef 8311 	mrs	r3, BASEPRI
 80051f2:	f04f 0120 	mov.w	r1, #32
 80051f6:	f381 8811 	msr	BASEPRI, r1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	4819      	ldr	r0, [pc, #100]	; (8005264 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80051fe:	f7ff fb30 	bl	8004862 <_PreparePacket>
 8005202:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005208:	4b17      	ldr	r3, [pc, #92]	; (8005268 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005210:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e00b      	b.n	8005234 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	6179      	str	r1, [r7, #20]
 8005226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	09db      	lsrs	r3, r3, #7
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b7f      	cmp	r3, #127	; 0x7f
 8005238:	d8f0      	bhi.n	800521c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	617a      	str	r2, [r7, #20]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800524a:	2202      	movs	r2, #2
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	68b8      	ldr	r0, [r7, #8]
 8005250:	f7ff fbf8 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f383 8811 	msr	BASEPRI, r3
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000878 	.word	0x20000878
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005272:	f3ef 8311 	mrs	r3, BASEPRI
 8005276:	f04f 0120 	mov.w	r1, #32
 800527a:	f381 8811 	msr	BASEPRI, r1
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	4807      	ldr	r0, [pc, #28]	; (80052a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005282:	f7ff faee 	bl	8004862 <_PreparePacket>
 8005286:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005288:	2203      	movs	r2, #3
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6838      	ldr	r0, [r7, #0]
 800528e:	f7ff fbd9 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f383 8811 	msr	BASEPRI, r3
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000878 	.word	0x20000878

080052a4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80052ae:	4b3b      	ldr	r3, [pc, #236]	; (800539c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d06d      	beq.n	8005392 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c0:	e008      	b.n	80052d4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	3301      	adds	r3, #1
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3f2      	bcc.n	80052c2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80052dc:	e000      	b.n	80052e0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80052de:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d055      	beq.n	8005392 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052e6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ea:	f04f 0120 	mov.w	r1, #32
 80052ee:	f381 8811 	msr	BASEPRI, r1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	482a      	ldr	r0, [pc, #168]	; (80053a0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80052f6:	f7ff fab4 	bl	8004862 <_PreparePacket>
 80052fa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	e00b      	b.n	8005322 <SEGGER_SYSVIEW_SendModule+0x7e>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	1c59      	adds	r1, r3, #1
 8005312:	6279      	str	r1, [r7, #36]	; 0x24
 8005314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	09db      	lsrs	r3, r3, #7
 8005320:	623b      	str	r3, [r7, #32]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2b7f      	cmp	r3, #127	; 0x7f
 8005326:	d8f0      	bhi.n	800530a <SEGGER_SYSVIEW_SendModule+0x66>
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	627a      	str	r2, [r7, #36]	; 0x24
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e00b      	b.n	800535c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	61f9      	str	r1, [r7, #28]
 800534e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	09db      	lsrs	r3, r3, #7
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b7f      	cmp	r3, #127	; 0x7f
 8005360:	d8f0      	bhi.n	8005344 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	61fa      	str	r2, [r7, #28]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	4619      	mov	r1, r3
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff fa24 	bl	80047c8 <_EncodeStr>
 8005380:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005382:	2216      	movs	r2, #22
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	6938      	ldr	r0, [r7, #16]
 8005388:	f7ff fb5c 	bl	8004a44 <_SendPacket>
      RECORD_END();
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005392:	bf00      	nop
 8005394:	3730      	adds	r7, #48	; 0x30
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000870 	.word	0x20000870
 80053a0:	20000878 	.word	0x20000878

080053a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00f      	beq.n	80053d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f2      	bne.n	80053b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000870 	.word	0x20000870

080053e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	f04f 0120 	mov.w	r1, #32
 80053ee:	f381 8811 	msr	BASEPRI, r1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	4817      	ldr	r0, [pc, #92]	; (8005454 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80053f6:	f7ff fa34 	bl	8004862 <_PreparePacket>
 80053fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	4b14      	ldr	r3, [pc, #80]	; (8005458 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e00b      	b.n	8005424 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	6179      	str	r1, [r7, #20]
 8005416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	09db      	lsrs	r3, r3, #7
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b7f      	cmp	r3, #127	; 0x7f
 8005428:	d8f0      	bhi.n	800540c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	617a      	str	r2, [r7, #20]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800543a:	221b      	movs	r2, #27
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68b8      	ldr	r0, [r7, #8]
 8005440:	f7ff fb00 	bl	8004a44 <_SendPacket>
  RECORD_END();
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f383 8811 	msr	BASEPRI, r3
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000878 	.word	0x20000878
 8005458:	20000874 	.word	0x20000874

0800545c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",O=NoOS,D="SYSVIEW_DEVICE_NAME);
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <_cbSendSystemDesc+0x14>)
 8005462:	f7ff fe6b 	bl	800513c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick,I#45=TIM3,I#27=DMA1_Stream0,I#44=TIM2,I#143=ADC3");
 8005466:	4803      	ldr	r0, [pc, #12]	; (8005474 <_cbSendSystemDesc+0x18>)
 8005468:	f7ff fe68 	bl	800513c <SEGGER_SYSVIEW_SendSysDesc>
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}
 8005470:	08005584 	.word	0x08005584
 8005474:	080055ac 	.word	0x080055ac

08005478 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
#endif
  //
  //  The cycle counter must be activated in order
  //  to use time related functions.
  //
  if ((DWT_CTRL & NOCYCCNT_BIT) == 0) {       // Cycle counter supported?
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <SEGGER_SYSVIEW_Conf+0x44>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <SEGGER_SYSVIEW_Conf+0x28>
    if ((DWT_CTRL & CYCCNTENA_BIT) == 0) {    // Cycle counter not enabled?
 8005488:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <SEGGER_SYSVIEW_Conf+0x44>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <SEGGER_SYSVIEW_Conf+0x28>
      DWT_CTRL |= CYCCNTENA_BIT;              // Enable Cycle counter
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <SEGGER_SYSVIEW_Conf+0x44>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <SEGGER_SYSVIEW_Conf+0x44>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6013      	str	r3, [r2, #0]
    }
  }
#endif
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <SEGGER_SYSVIEW_Conf+0x48>)
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <SEGGER_SYSVIEW_Conf+0x48>)
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <SEGGER_SYSVIEW_Conf+0x4c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	f7ff fbb0 	bl	8004c10 <SEGGER_SYSVIEW_Init>
                      0, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80054b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80054b4:	f7ff fbf0 	bl	8004c98 <SEGGER_SYSVIEW_SetRAMBase>
}
 80054b8:	bf00      	nop
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	e0001000 	.word	0xe0001000
 80054c0:	20000004 	.word	0x20000004
 80054c4:	0800545d 	.word	0x0800545d

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	4d0d      	ldr	r5, [pc, #52]	; (8005500 <__libc_init_array+0x38>)
 80054cc:	4c0d      	ldr	r4, [pc, #52]	; (8005504 <__libc_init_array+0x3c>)
 80054ce:	1b64      	subs	r4, r4, r5
 80054d0:	10a4      	asrs	r4, r4, #2
 80054d2:	2600      	movs	r6, #0
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	4d0b      	ldr	r5, [pc, #44]	; (8005508 <__libc_init_array+0x40>)
 80054da:	4c0c      	ldr	r4, [pc, #48]	; (800550c <__libc_init_array+0x44>)
 80054dc:	f000 f82e 	bl	800553c <_init>
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	2600      	movs	r6, #0
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	08005618 	.word	0x08005618
 8005504:	08005618 	.word	0x08005618
 8005508:	08005618 	.word	0x08005618
 800550c:	0800561c 	.word	0x0800561c

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005526:	4291      	cmp	r1, r2
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <_init>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr

08005548 <_fini>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr
